/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`delete_recording_add_on_result`]
#[derive(Clone, Debug)]
pub struct DeleteRecordingAddOnResultParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to delete.
    pub account_sid: String,
    /// The SID of the recording to which the result to delete belongs.
    pub reference_sid: String,
    /// The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_recording_add_on_result`]
#[derive(Clone, Debug)]
pub struct FetchRecordingAddOnResultParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resource to fetch.
    pub account_sid: String,
    /// The SID of the recording to which the result to fetch belongs.
    pub reference_sid: String,
    /// The Twilio-provided string that uniquely identifies the Recording AddOnResult resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_recording_add_on_result`]
#[derive(Clone, Debug)]
pub struct ListRecordingAddOnResultParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult resources to read.
    pub account_sid: String,
    /// The SID of the recording to which the result to read belongs.
    pub reference_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for typed successes of method [`delete_recording_add_on_result`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteRecordingAddOnResultSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_recording_add_on_result`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchRecordingAddOnResultSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodRecordingPeriodRecordingAddOnResult),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_recording_add_on_result`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListRecordingAddOnResultSuccess {
    Status200(models::ListRecordingAddOnResultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_recording_add_on_result`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteRecordingAddOnResultError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_recording_add_on_result`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchRecordingAddOnResultError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_recording_add_on_result`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListRecordingAddOnResultError {
    UnknownValue(serde_json::Value),
}

/// Delete a result and purge all associated Payloads
pub async fn delete_recording_add_on_result(
    configuration: &configuration::Configuration,
    params: DeleteRecordingAddOnResultParams,
) -> Result<
    ResponseContent<DeleteRecordingAddOnResultSuccess>,
    Error<DeleteRecordingAddOnResultError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        ReferenceSid = crate::apis::urlencode(params.reference_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteRecordingAddOnResultSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteRecordingAddOnResultError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch an instance of an AddOnResult
pub async fn fetch_recording_add_on_result(
    configuration: &configuration::Configuration,
    params: FetchRecordingAddOnResultParams,
) -> Result<ResponseContent<FetchRecordingAddOnResultSuccess>, Error<FetchRecordingAddOnResultError>>
{
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        ReferenceSid = crate::apis::urlencode(params.reference_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchRecordingAddOnResultSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchRecordingAddOnResultError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of results belonging to the recording
pub async fn list_recording_add_on_result(
    configuration: &configuration::Configuration,
    params: ListRecordingAddOnResultParams,
) -> Result<ResponseContent<ListRecordingAddOnResultSuccess>, Error<ListRecordingAddOnResultError>>
{
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        ReferenceSid = crate::apis::urlencode(params.reference_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListRecordingAddOnResultSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListRecordingAddOnResultError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
