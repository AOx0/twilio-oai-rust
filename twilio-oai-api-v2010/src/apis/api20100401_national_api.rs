/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`list_available_phone_number_national`]
#[derive(Clone, Debug)]
pub struct ListAvailablePhoneNumberNationalParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) requesting the AvailablePhoneNumber resources.
    pub account_sid: String,
    /// The [ISO-3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the country from which to read phone numbers.
    pub country_code: String,
    /// The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
    pub area_code: Option<i32>,
    /// The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
    pub contains: Option<String>,
    /// Whether the phone numbers can receive text messages. Can be: `true` or `false`.
    pub sms_enabled: Option<bool>,
    /// Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
    pub mms_enabled: Option<bool>,
    /// Whether the phone numbers can receive calls. Can be: `true` or `false`.
    pub voice_enabled: Option<bool>,
    /// Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    pub exclude_all_address_required: Option<bool>,
    /// Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    pub exclude_local_address_required: Option<bool>,
    /// Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
    pub exclude_foreign_address_required: Option<bool>,
    /// Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    pub beta: Option<bool>,
    /// Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
    pub near_number: Option<String>,
    /// Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
    pub near_lat_long: Option<String>,
    /// The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
    pub distance: Option<i32>,
    /// Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
    pub in_postal_code: Option<String>,
    /// Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
    pub in_region: Option<String>,
    /// Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
    pub in_rate_center: Option<String>,
    /// Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
    pub in_lata: Option<String>,
    /// Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
    pub in_locality: Option<String>,
    /// Whether the phone numbers can receive faxes. Can be: `true` or `false`.
    pub fax_enabled: Option<bool>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for typed successes of method [`list_available_phone_number_national`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAvailablePhoneNumberNationalSuccess {
    Status200(models::ListAvailablePhoneNumberNationalResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_available_phone_number_national`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAvailablePhoneNumberNationalError {
    UnknownValue(serde_json::Value),
}

///
pub async fn list_available_phone_number_national(
    configuration: &configuration::Configuration,
    params: ListAvailablePhoneNumberNationalParams,
) -> Result<
    ResponseContent<ListAvailablePhoneNumberNationalSuccess>,
    Error<ListAvailablePhoneNumberNationalError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/National.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CountryCode = crate::apis::urlencode(params.country_code)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.area_code {
        req_builder = req_builder.query(&[("AreaCode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.contains {
        req_builder = req_builder.query(&[("Contains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.sms_enabled {
        req_builder = req_builder.query(&[("SmsEnabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.mms_enabled {
        req_builder = req_builder.query(&[("MmsEnabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.voice_enabled {
        req_builder = req_builder.query(&[("VoiceEnabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.exclude_all_address_required {
        req_builder = req_builder.query(&[("ExcludeAllAddressRequired", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.exclude_local_address_required {
        req_builder =
            req_builder.query(&[("ExcludeLocalAddressRequired", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.exclude_foreign_address_required {
        req_builder =
            req_builder.query(&[("ExcludeForeignAddressRequired", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.beta {
        req_builder = req_builder.query(&[("Beta", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.near_number {
        req_builder = req_builder.query(&[("NearNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.near_lat_long {
        req_builder = req_builder.query(&[("NearLatLong", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.distance {
        req_builder = req_builder.query(&[("Distance", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.in_postal_code {
        req_builder = req_builder.query(&[("InPostalCode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.in_region {
        req_builder = req_builder.query(&[("InRegion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.in_rate_center {
        req_builder = req_builder.query(&[("InRateCenter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.in_lata {
        req_builder = req_builder.query(&[("InLata", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.in_locality {
        req_builder = req_builder.query(&[("InLocality", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.fax_enabled {
        req_builder = req_builder.query(&[("FaxEnabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListAvailablePhoneNumberNationalSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListAvailablePhoneNumberNationalError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
