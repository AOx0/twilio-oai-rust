/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_call_recording`]
#[derive(Clone, Debug)]
pub struct CreateCallRecordingParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    pub account_sid: String,
    /// The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
    pub call_sid: String,
    /// The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
    pub recording_status_callback_event: Option<Vec<String>>,
    /// The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
    pub recording_status_callback: Option<String>,
    /// The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`.
    pub recording_status_callback_method: Option<String>,
    /// Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
    pub trim: Option<String>,
    /// The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
    pub recording_channels: Option<String>,
    /// The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    pub recording_track: Option<String>,
}

/// struct for passing parameters to the method [`delete_call_recording`]
#[derive(Clone, Debug)]
pub struct DeleteCallRecordingParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
    pub account_sid: String,
    /// The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
    pub call_sid: String,
    /// The Twilio-provided string that uniquely identifies the Recording resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_call_recording`]
#[derive(Clone, Debug)]
pub struct FetchCallRecordingParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
    pub account_sid: String,
    /// The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
    pub call_sid: String,
    /// The Twilio-provided string that uniquely identifies the Recording resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_call_recording`]
#[derive(Clone, Debug)]
pub struct ListCallRecordingParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
    pub account_sid: String,
    /// The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    pub call_sid: String,
    /// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    pub date_created: Option<String>,
    /// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    pub date_created_less_than: Option<String>,
    /// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    pub date_created_greater_than: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_call_recording`]
#[derive(Clone, Debug)]
pub struct UpdateCallRecordingParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
    pub account_sid: String,
    /// The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
    pub call_sid: String,
    /// The Twilio-provided string that uniquely identifies the Recording resource to update.
    pub sid: String,
    pub status: models::CallRecordingEnumStatus,
    /// Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    pub pause_behavior: Option<String>,
}

/// struct for typed successes of method [`create_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCallRecordingSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodCallPeriodCallRecording),
    Status201(models::ApiPeriodV2010PeriodAccountPeriodCallPeriodCallRecording),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCallRecordingSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCallRecordingSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodCallPeriodCallRecording),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCallRecordingSuccess {
    Status200(models::ListCallRecordingResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCallRecordingSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodCallPeriodCallRecording),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCallRecordingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCallRecordingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCallRecordingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCallRecordingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_call_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCallRecordingError {
    UnknownValue(serde_json::Value),
}

/// Create a recording for the call
pub async fn create_call_recording(
    configuration: &configuration::Configuration,
    params: CreateCallRecordingParams,
) -> Result<ResponseContent<CreateCallRecordingSuccess>, Error<CreateCallRecordingError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.recording_status_callback_event {
        multipart_form_params.insert(
            "RecordingStatusCallbackEvent",
            param_value
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        );
    }
    if let Some(param_value) = params.recording_status_callback {
        multipart_form_params.insert("RecordingStatusCallback", param_value.to_string());
    }
    if let Some(param_value) = params.recording_status_callback_method {
        multipart_form_params.insert("RecordingStatusCallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.trim {
        multipart_form_params.insert("Trim", param_value.to_string());
    }
    if let Some(param_value) = params.recording_channels {
        multipart_form_params.insert("RecordingChannels", param_value.to_string());
    }
    if let Some(param_value) = params.recording_track {
        multipart_form_params.insert("RecordingTrack", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateCallRecordingSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateCallRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete a recording from your account
pub async fn delete_call_recording(
    configuration: &configuration::Configuration,
    params: DeleteCallRecordingParams,
) -> Result<ResponseContent<DeleteCallRecordingSuccess>, Error<DeleteCallRecordingError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteCallRecordingSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteCallRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch an instance of a recording for a call
pub async fn fetch_call_recording(
    configuration: &configuration::Configuration,
    params: FetchCallRecordingParams,
) -> Result<ResponseContent<FetchCallRecordingSuccess>, Error<FetchCallRecordingError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchCallRecordingSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchCallRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of recordings belonging to the call used to make the request
pub async fn list_call_recording(
    configuration: &configuration::Configuration,
    params: ListCallRecordingParams,
) -> Result<ResponseContent<ListCallRecordingSuccess>, Error<ListCallRecordingError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.date_created {
        req_builder = req_builder.query(&[("DateCreated", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_created_less_than {
        req_builder = req_builder.query(&[("DateCreated<", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_created_greater_than {
        req_builder = req_builder.query(&[("DateCreated>", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListCallRecordingSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListCallRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Changes the status of the recording to paused, stopped, or in-progress. Note: Pass `Twilio.CURRENT` instead of recording sid to reference current active recording.
pub async fn update_call_recording(
    configuration: &configuration::Configuration,
    params: UpdateCallRecordingParams,
) -> Result<ResponseContent<UpdateCallRecordingSuccess>, Error<UpdateCallRecordingError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("Status", params.status.to_string());
    if let Some(param_value) = params.pause_behavior {
        multipart_form_params.insert("PauseBehavior", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateCallRecordingSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCallRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
