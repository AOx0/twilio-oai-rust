/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`fetch_recording_add_on_result_payload_data`]
#[derive(Clone, Debug)]
pub struct FetchRecordingAddOnResultPayloadDataParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording AddOnResult Payload resource to fetch.
    pub account_sid: String,
    /// The SID of the recording to which the AddOnResult resource that contains the payload to fetch belongs.
    pub reference_sid: String,
    /// The SID of the AddOnResult to which the payload to fetch belongs.
    pub add_on_result_sid: String,
    /// The Twilio-provided string that uniquely identifies the Recording AddOnResult Payload resource to fetch.
    pub payload_sid: String,
}

/// struct for typed successes of method [`fetch_recording_add_on_result_payload_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchRecordingAddOnResultPayloadDataSuccess {
    Status307(models::ApiPeriodV2010PeriodAccountPeriodRecordingPeriodRecordingAddOnResultPeriodRecordingAddOnResultPayloadPeriodRecordingAddOnResultPayloadData),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_recording_add_on_result_payload_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchRecordingAddOnResultPayloadDataError {
    UnknownValue(serde_json::Value),
}

/// Fetch an instance of a result payload
pub async fn fetch_recording_add_on_result_payload_data(
    configuration: &configuration::Configuration,
    params: FetchRecordingAddOnResultPayloadDataParams,
) -> Result<
    ResponseContent<FetchRecordingAddOnResultPayloadDataSuccess>,
    Error<FetchRecordingAddOnResultPayloadDataError>,
> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{PayloadSid}/Data.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), ReferenceSid=crate::apis::urlencode(params.reference_sid), AddOnResultSid=crate::apis::urlencode(params.add_on_result_sid), PayloadSid=crate::apis::urlencode(params.payload_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchRecordingAddOnResultPayloadDataSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchRecordingAddOnResultPayloadDataError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
