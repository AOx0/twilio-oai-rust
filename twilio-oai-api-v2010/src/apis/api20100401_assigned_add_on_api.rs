/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_incoming_phone_number_assigned_add_on`]
#[derive(Clone, Debug)]
pub struct CreateIncomingPhoneNumberAssignedAddOnParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    pub account_sid: String,
    /// The SID of the Phone Number to assign the Add-on.
    pub resource_sid: String,
    /// The SID that identifies the Add-on installation.
    pub installed_add_on_sid: String,
}

/// struct for passing parameters to the method [`delete_incoming_phone_number_assigned_add_on`]
#[derive(Clone, Debug)]
pub struct DeleteIncomingPhoneNumberAssignedAddOnParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to delete.
    pub account_sid: String,
    /// The SID of the Phone Number to which the Add-on is assigned.
    pub resource_sid: String,
    /// The Twilio-provided string that uniquely identifies the resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_incoming_phone_number_assigned_add_on`]
#[derive(Clone, Debug)]
pub struct FetchIncomingPhoneNumberAssignedAddOnParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resource to fetch.
    pub account_sid: String,
    /// The SID of the Phone Number to which the Add-on is assigned.
    pub resource_sid: String,
    /// The Twilio-provided string that uniquely identifies the resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_incoming_phone_number_assigned_add_on`]
#[derive(Clone, Debug)]
pub struct ListIncomingPhoneNumberAssignedAddOnParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    pub account_sid: String,
    /// The SID of the Phone Number to which the Add-on is assigned.
    pub resource_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for typed successes of method [`create_incoming_phone_number_assigned_add_on`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateIncomingPhoneNumberAssignedAddOnSuccess {
    Status201(models::ApiPeriodV2010PeriodAccountPeriodIncomingPhoneNumberPeriodIncomingPhoneNumberAssignedAddOn),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_incoming_phone_number_assigned_add_on`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteIncomingPhoneNumberAssignedAddOnSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_incoming_phone_number_assigned_add_on`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchIncomingPhoneNumberAssignedAddOnSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodIncomingPhoneNumberPeriodIncomingPhoneNumberAssignedAddOn),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_incoming_phone_number_assigned_add_on`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListIncomingPhoneNumberAssignedAddOnSuccess {
    Status200(models::ListIncomingPhoneNumberAssignedAddOnResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_incoming_phone_number_assigned_add_on`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateIncomingPhoneNumberAssignedAddOnError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_incoming_phone_number_assigned_add_on`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteIncomingPhoneNumberAssignedAddOnError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_incoming_phone_number_assigned_add_on`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchIncomingPhoneNumberAssignedAddOnError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_incoming_phone_number_assigned_add_on`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListIncomingPhoneNumberAssignedAddOnError {
    UnknownValue(serde_json::Value),
}

/// Assign an Add-on installation to the Number specified.
pub async fn create_incoming_phone_number_assigned_add_on(
    configuration: &configuration::Configuration,
    params: CreateIncomingPhoneNumberAssignedAddOnParams,
) -> Result<
    ResponseContent<CreateIncomingPhoneNumberAssignedAddOnSuccess>,
    Error<CreateIncomingPhoneNumberAssignedAddOnError>,
> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), ResourceSid=crate::apis::urlencode(params.resource_sid));
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("InstalledAddOnSid", params.installed_add_on_sid.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateIncomingPhoneNumberAssignedAddOnSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateIncomingPhoneNumberAssignedAddOnError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Remove the assignment of an Add-on installation from the Number specified.
pub async fn delete_incoming_phone_number_assigned_add_on(
    configuration: &configuration::Configuration,
    params: DeleteIncomingPhoneNumberAssignedAddOnParams,
) -> Result<
    ResponseContent<DeleteIncomingPhoneNumberAssignedAddOnSuccess>,
    Error<DeleteIncomingPhoneNumberAssignedAddOnError>,
> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), ResourceSid=crate::apis::urlencode(params.resource_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteIncomingPhoneNumberAssignedAddOnSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteIncomingPhoneNumberAssignedAddOnError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch an instance of an Add-on installation currently assigned to this Number.
pub async fn fetch_incoming_phone_number_assigned_add_on(
    configuration: &configuration::Configuration,
    params: FetchIncomingPhoneNumberAssignedAddOnParams,
) -> Result<
    ResponseContent<FetchIncomingPhoneNumberAssignedAddOnSuccess>,
    Error<FetchIncomingPhoneNumberAssignedAddOnError>,
> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), ResourceSid=crate::apis::urlencode(params.resource_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchIncomingPhoneNumberAssignedAddOnSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchIncomingPhoneNumberAssignedAddOnError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of Add-on installations currently assigned to this Number.
pub async fn list_incoming_phone_number_assigned_add_on(
    configuration: &configuration::Configuration,
    params: ListIncomingPhoneNumberAssignedAddOnParams,
) -> Result<
    ResponseContent<ListIncomingPhoneNumberAssignedAddOnSuccess>,
    Error<ListIncomingPhoneNumberAssignedAddOnError>,
> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), ResourceSid=crate::apis::urlencode(params.resource_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListIncomingPhoneNumberAssignedAddOnSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListIncomingPhoneNumberAssignedAddOnError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
