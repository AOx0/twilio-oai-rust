/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_usage_trigger`]
#[derive(Clone, Debug)]
pub struct CreateUsageTriggerParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    pub account_sid: String,
    /// The URL we should call using `callback_method` when the trigger fires.
    pub callback_url: String,
    /// The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
    pub trigger_value: String,
    pub usage_category: models::UsageTriggerEnumUsageCategory,
    /// The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`.
    pub callback_method: Option<String>,
    /// A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    pub friendly_name: Option<String>,
    pub recurring: Option<models::UsageTriggerEnumRecurring>,
    pub trigger_by: Option<models::UsageTriggerEnumTriggerField>,
}

/// struct for passing parameters to the method [`delete_usage_trigger`]
#[derive(Clone, Debug)]
pub struct DeleteUsageTriggerParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_usage_trigger`]
#[derive(Clone, Debug)]
pub struct FetchUsageTriggerParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_usage_trigger`]
#[derive(Clone, Debug)]
pub struct ListUsageTriggerParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
    pub account_sid: String,
    /// The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
    pub recurring: Option<models::UsageTriggerEnumRecurring>,
    /// The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
    pub trigger_by: Option<models::UsageTriggerEnumTriggerField>,
    /// The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
    pub usage_category: Option<models::UsageTriggerEnumUsageCategory>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_usage_trigger`]
#[derive(Clone, Debug)]
pub struct UpdateUsageTriggerParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
    pub sid: String,
    /// The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`.
    pub callback_method: Option<String>,
    /// The URL we should call using `callback_method` when the trigger fires.
    pub callback_url: Option<String>,
    /// A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    pub friendly_name: Option<String>,
}

/// struct for typed successes of method [`create_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUsageTriggerSuccess {
    Status201(models::ApiPeriodV2010PeriodAccountPeriodUsagePeriodUsageTrigger),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteUsageTriggerSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchUsageTriggerSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodUsagePeriodUsageTrigger),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListUsageTriggerSuccess {
    Status200(models::ListUsageTriggerResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateUsageTriggerSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodUsagePeriodUsageTrigger),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUsageTriggerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteUsageTriggerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchUsageTriggerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListUsageTriggerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_usage_trigger`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateUsageTriggerError {
    UnknownValue(serde_json::Value),
}

/// Create a new UsageTrigger
pub async fn create_usage_trigger(
    configuration: &configuration::Configuration,
    params: CreateUsageTriggerParams,
) -> Result<ResponseContent<CreateUsageTriggerSuccess>, Error<CreateUsageTriggerError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("CallbackUrl", params.callback_url.to_string());
    multipart_form_params.insert("TriggerValue", params.trigger_value.to_string());
    multipart_form_params.insert("UsageCategory", params.usage_category.to_string());
    if let Some(param_value) = params.callback_method {
        multipart_form_params.insert("CallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.recurring {
        multipart_form_params.insert("Recurring", param_value.to_string());
    }
    if let Some(param_value) = params.trigger_by {
        multipart_form_params.insert("TriggerBy", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateUsageTriggerSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateUsageTriggerError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///
pub async fn delete_usage_trigger(
    configuration: &configuration::Configuration,
    params: DeleteUsageTriggerParams,
) -> Result<ResponseContent<DeleteUsageTriggerSuccess>, Error<DeleteUsageTriggerError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteUsageTriggerSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteUsageTriggerError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch and instance of a usage-trigger
pub async fn fetch_usage_trigger(
    configuration: &configuration::Configuration,
    params: FetchUsageTriggerParams,
) -> Result<ResponseContent<FetchUsageTriggerSuccess>, Error<FetchUsageTriggerError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchUsageTriggerSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchUsageTriggerError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of usage-triggers belonging to the account used to make the request
pub async fn list_usage_trigger(
    configuration: &configuration::Configuration,
    params: ListUsageTriggerParams,
) -> Result<ResponseContent<ListUsageTriggerSuccess>, Error<ListUsageTriggerError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.recurring {
        req_builder = req_builder.query(&[("Recurring", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.trigger_by {
        req_builder = req_builder.query(&[("TriggerBy", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.usage_category {
        req_builder = req_builder.query(&[("UsageCategory", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListUsageTriggerSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListUsageTriggerError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update an instance of a usage trigger
pub async fn update_usage_trigger(
    configuration: &configuration::Configuration,
    params: UpdateUsageTriggerParams,
) -> Result<ResponseContent<UpdateUsageTriggerSuccess>, Error<UpdateUsageTriggerError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.callback_method {
        multipart_form_params.insert("CallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.callback_url {
        multipart_form_params.insert("CallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateUsageTriggerSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateUsageTriggerError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
