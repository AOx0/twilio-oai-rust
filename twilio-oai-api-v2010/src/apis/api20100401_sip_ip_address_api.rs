/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_sip_ip_address`]
#[derive(Clone, Debug)]
pub struct CreateSipIpAddressParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// The IpAccessControlList Sid with which to associate the created IpAddress resource.
    pub ip_access_control_list_sid: String,
    /// A human readable descriptive text for this resource, up to 255 characters long.
    pub friendly_name: String,
    /// An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    pub ip_address: String,
    /// An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    pub cidr_prefix_length: Option<i32>,
}

/// struct for passing parameters to the method [`delete_sip_ip_address`]
#[derive(Clone, Debug)]
pub struct DeleteSipIpAddressParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// The IpAccessControlList Sid that identifies the IpAddress resources to delete.
    pub ip_access_control_list_sid: String,
    /// A 34 character string that uniquely identifies the resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_sip_ip_address`]
#[derive(Clone, Debug)]
pub struct FetchSipIpAddressParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
    pub ip_access_control_list_sid: String,
    /// A 34 character string that uniquely identifies the IpAddress resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_sip_ip_address`]
#[derive(Clone, Debug)]
pub struct ListSipIpAddressParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// The IpAccessControlList Sid that identifies the IpAddress resources to read.
    pub ip_access_control_list_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_sip_ip_address`]
#[derive(Clone, Debug)]
pub struct UpdateSipIpAddressParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// The IpAccessControlList Sid that identifies the IpAddress resources to update.
    pub ip_access_control_list_sid: String,
    /// A 34 character string that identifies the IpAddress resource to update.
    pub sid: String,
    /// An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    pub ip_address: Option<String>,
    /// A human readable descriptive text for this resource, up to 255 characters long.
    pub friendly_name: Option<String>,
    /// An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    pub cidr_prefix_length: Option<i32>,
}

/// struct for typed successes of method [`create_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSipIpAddressSuccess {
    Status201(
        models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipIpAccessControlListPeriodSipIpAddress,
    ),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSipIpAddressSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSipIpAddressSuccess {
    Status200(
        models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipIpAccessControlListPeriodSipIpAddress,
    ),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSipIpAddressSuccess {
    Status200(models::ListSipIpAddressResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSipIpAddressSuccess {
    Status200(
        models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipIpAccessControlListPeriodSipIpAddress,
    ),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSipIpAddressError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSipIpAddressError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSipIpAddressError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSipIpAddressError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_sip_ip_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSipIpAddressError {
    UnknownValue(serde_json::Value),
}

/// Create a new IpAddress resource.
pub async fn create_sip_ip_address(
    configuration: &configuration::Configuration,
    params: CreateSipIpAddressParams,
) -> Result<ResponseContent<CreateSipIpAddressSuccess>, Error<CreateSipIpAddressError>> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), IpAccessControlListSid=crate::apis::urlencode(params.ip_access_control_list_sid));
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("FriendlyName", params.friendly_name.to_string());
    multipart_form_params.insert("IpAddress", params.ip_address.to_string());
    if let Some(param_value) = params.cidr_prefix_length {
        multipart_form_params.insert("CidrPrefixLength", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateSipIpAddressSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateSipIpAddressError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete an IpAddress resource.
pub async fn delete_sip_ip_address(
    configuration: &configuration::Configuration,
    params: DeleteSipIpAddressParams,
) -> Result<ResponseContent<DeleteSipIpAddressSuccess>, Error<DeleteSipIpAddressError>> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), IpAccessControlListSid=crate::apis::urlencode(params.ip_access_control_list_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteSipIpAddressSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSipIpAddressError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Read one IpAddress resource.
pub async fn fetch_sip_ip_address(
    configuration: &configuration::Configuration,
    params: FetchSipIpAddressParams,
) -> Result<ResponseContent<FetchSipIpAddressSuccess>, Error<FetchSipIpAddressError>> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), IpAccessControlListSid=crate::apis::urlencode(params.ip_access_control_list_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchSipIpAddressSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchSipIpAddressError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Read multiple IpAddress resources.
pub async fn list_sip_ip_address(
    configuration: &configuration::Configuration,
    params: ListSipIpAddressParams,
) -> Result<ResponseContent<ListSipIpAddressSuccess>, Error<ListSipIpAddressError>> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), IpAccessControlListSid=crate::apis::urlencode(params.ip_access_control_list_sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListSipIpAddressSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListSipIpAddressError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update an IpAddress resource.
pub async fn update_sip_ip_address(
    configuration: &configuration::Configuration,
    params: UpdateSipIpAddressParams,
) -> Result<ResponseContent<UpdateSipIpAddressSuccess>, Error<UpdateSipIpAddressError>> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), IpAccessControlListSid=crate::apis::urlencode(params.ip_access_control_list_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.ip_address {
        multipart_form_params.insert("IpAddress", param_value.to_string());
    }
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.cidr_prefix_length {
        multipart_form_params.insert("CidrPrefixLength", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateSipIpAddressSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateSipIpAddressError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
