/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_message_feedback`]
#[derive(Clone, Debug)]
pub struct CreateMessageFeedbackParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resource for which to create MessageFeedback.
    pub account_sid: String,
    /// The SID of the Message resource for which to create MessageFeedback.
    pub message_sid: String,
    pub outcome: Option<models::MessageFeedbackEnumOutcome>,
}

/// struct for typed successes of method [`create_message_feedback`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateMessageFeedbackSuccess {
    Status201(models::ApiPeriodV2010PeriodAccountPeriodMessagePeriodMessageFeedback),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_message_feedback`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateMessageFeedbackError {
    UnknownValue(serde_json::Value),
}

/// Create Message Feedback to confirm a tracked user action was performed by the recipient of the associated Message
pub async fn create_message_feedback(
    configuration: &configuration::Configuration,
    params: CreateMessageFeedbackParams,
) -> Result<ResponseContent<CreateMessageFeedbackSuccess>, Error<CreateMessageFeedbackError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Feedback.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        MessageSid = crate::apis::urlencode(params.message_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.outcome {
        multipart_form_params.insert("Outcome", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateMessageFeedbackSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateMessageFeedbackError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
