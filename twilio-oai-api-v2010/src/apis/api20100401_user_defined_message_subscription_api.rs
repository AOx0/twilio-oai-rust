/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_user_defined_message_subscription`]
#[derive(Clone, Debug)]
pub struct CreateUserDefinedMessageSubscriptionParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    pub account_sid: String,
    /// The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
    pub call_sid: String,
    /// The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted).
    pub callback: String,
    /// A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    pub idempotency_key: Option<String>,
    /// The HTTP method Twilio will use when requesting the above `Url`. Either `GET` or `POST`. Default is `POST`.
    pub method: Option<String>,
}

/// struct for passing parameters to the method [`delete_user_defined_message_subscription`]
#[derive(Clone, Debug)]
pub struct DeleteUserDefinedMessageSubscriptionParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
    pub account_sid: String,
    /// The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
    pub call_sid: String,
    /// The SID that uniquely identifies this User Defined Message Subscription.
    pub sid: String,
}

/// struct for typed successes of method [`create_user_defined_message_subscription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUserDefinedMessageSubscriptionSuccess {
    Status201(models::ApiPeriodV2010PeriodAccountPeriodCallPeriodUserDefinedMessageSubscription),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_user_defined_message_subscription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteUserDefinedMessageSubscriptionSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_user_defined_message_subscription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUserDefinedMessageSubscriptionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_user_defined_message_subscription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteUserDefinedMessageSubscriptionError {
    UnknownValue(serde_json::Value),
}

/// Subscribe to User Defined Messages for a given Call SID.
pub async fn create_user_defined_message_subscription(
    configuration: &configuration::Configuration,
    params: CreateUserDefinedMessageSubscriptionParams,
) -> Result<
    ResponseContent<CreateUserDefinedMessageSubscriptionSuccess>,
    Error<CreateUserDefinedMessageSubscriptionError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("Callback", params.callback.to_string());
    if let Some(param_value) = params.idempotency_key {
        multipart_form_params.insert("IdempotencyKey", param_value.to_string());
    }
    if let Some(param_value) = params.method {
        multipart_form_params.insert("Method", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateUserDefinedMessageSubscriptionSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateUserDefinedMessageSubscriptionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete a specific User Defined Message Subscription.
pub async fn delete_user_defined_message_subscription(
    configuration: &configuration::Configuration,
    params: DeleteUserDefinedMessageSubscriptionParams,
) -> Result<
    ResponseContent<DeleteUserDefinedMessageSubscriptionSuccess>,
    Error<DeleteUserDefinedMessageSubscriptionError>,
> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions/{Sid}.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), CallSid=crate::apis::urlencode(params.call_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteUserDefinedMessageSubscriptionSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteUserDefinedMessageSubscriptionError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
