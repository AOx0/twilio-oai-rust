/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_realtime_transcription`]
#[derive(Clone, Debug)]
pub struct CreateRealtimeTranscriptionParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Transcription resource.
    pub account_sid: String,
    /// The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Transcription resource is associated with.
    pub call_sid: String,
    /// The user-specified name of this Transcription, if one was given when the Transcription was created. This may be used to stop the Transcription.
    pub name: Option<String>,
    pub track: Option<models::RealtimeTranscriptionEnumTrack>,
    /// Absolute URL of the status callback.
    pub status_callback_url: Option<String>,
    /// The http method for the status_callback (one of GET, POST).
    pub status_callback_method: Option<String>,
    /// Friendly name given to the Inbound Track
    pub inbound_track_label: Option<String>,
    /// Friendly name given to the Outbound Track
    pub outbound_track_label: Option<String>,
    /// Indicates if partial results are going to be sent to the customer
    pub partial_results: Option<bool>,
    /// Language code used by the transcription engine, specified in [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) format
    pub language_code: Option<String>,
    /// Definition of the transcription engine to be used, among those supported by Twilio
    pub transcription_engine: Option<String>,
    /// indicates if the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks
    pub profanity_filter: Option<bool>,
    /// Recognition model used by the transcription engine, among those supported by the provider
    pub speech_model: Option<String>,
    /// A Phrase contains words and phrase \\\"hints\\\" so that the speech recognition engine is more likely to recognize them.
    pub hints: Option<String>,
    /// The provider will add punctuation to recognition result
    pub enable_automatic_punctuation: Option<bool>,
    /// The SID or unique name of the [Intelligence Service](https://www.twilio.com/docs/conversational-intelligence/api/service-resource) for persisting transcripts and running post-call Language Operators .
    pub intelligence_service: Option<String>,
}

/// struct for passing parameters to the method [`update_realtime_transcription`]
#[derive(Clone, Debug)]
pub struct UpdateRealtimeTranscriptionParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Transcription resource.
    pub account_sid: String,
    /// The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Transcription resource is associated with.
    pub call_sid: String,
    /// The SID of the Transcription resource, or the `name` used when creating the resource
    pub sid: String,
    pub status: models::RealtimeTranscriptionEnumUpdateStatus,
}

/// struct for typed successes of method [`create_realtime_transcription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateRealtimeTranscriptionSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodCallPeriodRealtimeTranscription),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_realtime_transcription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateRealtimeTranscriptionSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodCallPeriodRealtimeTranscription),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_realtime_transcription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateRealtimeTranscriptionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_realtime_transcription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateRealtimeTranscriptionError {
    UnknownValue(serde_json::Value),
}

/// Create a Transcription
pub async fn create_realtime_transcription(
    configuration: &configuration::Configuration,
    params: CreateRealtimeTranscriptionParams,
) -> Result<
    ResponseContent<CreateRealtimeTranscriptionSuccess>,
    Error<CreateRealtimeTranscriptionError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Transcriptions.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.name {
        multipart_form_params.insert("Name", param_value.to_string());
    }
    if let Some(param_value) = params.track {
        multipart_form_params.insert("Track", param_value.to_string());
    }
    if let Some(param_value) = params.status_callback_url {
        multipart_form_params.insert("StatusCallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.status_callback_method {
        multipart_form_params.insert("StatusCallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.inbound_track_label {
        multipart_form_params.insert("InboundTrackLabel", param_value.to_string());
    }
    if let Some(param_value) = params.outbound_track_label {
        multipart_form_params.insert("OutboundTrackLabel", param_value.to_string());
    }
    if let Some(param_value) = params.partial_results {
        multipart_form_params.insert("PartialResults", param_value.to_string());
    }
    if let Some(param_value) = params.language_code {
        multipart_form_params.insert("LanguageCode", param_value.to_string());
    }
    if let Some(param_value) = params.transcription_engine {
        multipart_form_params.insert("TranscriptionEngine", param_value.to_string());
    }
    if let Some(param_value) = params.profanity_filter {
        multipart_form_params.insert("ProfanityFilter", param_value.to_string());
    }
    if let Some(param_value) = params.speech_model {
        multipart_form_params.insert("SpeechModel", param_value.to_string());
    }
    if let Some(param_value) = params.hints {
        multipart_form_params.insert("Hints", param_value.to_string());
    }
    if let Some(param_value) = params.enable_automatic_punctuation {
        multipart_form_params.insert("EnableAutomaticPunctuation", param_value.to_string());
    }
    if let Some(param_value) = params.intelligence_service {
        multipart_form_params.insert("IntelligenceService", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateRealtimeTranscriptionSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateRealtimeTranscriptionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Stop a Transcription using either the SID of the Transcription resource or the `name` used when creating the resource
pub async fn update_realtime_transcription(
    configuration: &configuration::Configuration,
    params: UpdateRealtimeTranscriptionParams,
) -> Result<
    ResponseContent<UpdateRealtimeTranscriptionSuccess>,
    Error<UpdateRealtimeTranscriptionError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Transcriptions/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("Status", params.status.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateRealtimeTranscriptionSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateRealtimeTranscriptionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
