/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_sip_ip_access_control_list`]
#[derive(Clone, Debug)]
pub struct CreateSipIpAccessControlListParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A human readable descriptive text that describes the IpAccessControlList, up to 255 characters long.
    pub friendly_name: String,
}

/// struct for passing parameters to the method [`delete_sip_ip_access_control_list`]
#[derive(Clone, Debug)]
pub struct DeleteSipIpAccessControlListParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A 34 character string that uniquely identifies the resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_sip_ip_access_control_list`]
#[derive(Clone, Debug)]
pub struct FetchSipIpAccessControlListParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A 34 character string that uniquely identifies the resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_sip_ip_access_control_list`]
#[derive(Clone, Debug)]
pub struct ListSipIpAccessControlListParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_sip_ip_access_control_list`]
#[derive(Clone, Debug)]
pub struct UpdateSipIpAccessControlListParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A 34 character string that uniquely identifies the resource to udpate.
    pub sid: String,
    /// A human readable descriptive text, up to 255 characters long.
    pub friendly_name: String,
}

/// struct for typed successes of method [`create_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSipIpAccessControlListSuccess {
    Status201(models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipIpAccessControlList),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSipIpAccessControlListSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSipIpAccessControlListSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipIpAccessControlList),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSipIpAccessControlListSuccess {
    Status200(models::ListSipIpAccessControlListResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSipIpAccessControlListSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipIpAccessControlList),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSipIpAccessControlListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSipIpAccessControlListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSipIpAccessControlListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSipIpAccessControlListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_sip_ip_access_control_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSipIpAccessControlListError {
    UnknownValue(serde_json::Value),
}

/// Create a new IpAccessControlList resource
pub async fn create_sip_ip_access_control_list(
    configuration: &configuration::Configuration,
    params: CreateSipIpAccessControlListParams,
) -> Result<
    ResponseContent<CreateSipIpAccessControlListSuccess>,
    Error<CreateSipIpAccessControlListError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("FriendlyName", params.friendly_name.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateSipIpAccessControlListSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateSipIpAccessControlListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete an IpAccessControlList from the requested account
pub async fn delete_sip_ip_access_control_list(
    configuration: &configuration::Configuration,
    params: DeleteSipIpAccessControlListParams,
) -> Result<
    ResponseContent<DeleteSipIpAccessControlListSuccess>,
    Error<DeleteSipIpAccessControlListError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteSipIpAccessControlListSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSipIpAccessControlListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch a specific instance of an IpAccessControlList
pub async fn fetch_sip_ip_access_control_list(
    configuration: &configuration::Configuration,
    params: FetchSipIpAccessControlListParams,
) -> Result<
    ResponseContent<FetchSipIpAccessControlListSuccess>,
    Error<FetchSipIpAccessControlListError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchSipIpAccessControlListSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchSipIpAccessControlListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of IpAccessControlLists that belong to the account used to make the request
pub async fn list_sip_ip_access_control_list(
    configuration: &configuration::Configuration,
    params: ListSipIpAccessControlListParams,
) -> Result<
    ResponseContent<ListSipIpAccessControlListSuccess>,
    Error<ListSipIpAccessControlListError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListSipIpAccessControlListSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListSipIpAccessControlListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Rename an IpAccessControlList
pub async fn update_sip_ip_access_control_list(
    configuration: &configuration::Configuration,
    params: UpdateSipIpAccessControlListParams,
) -> Result<
    ResponseContent<UpdateSipIpAccessControlListSuccess>,
    Error<UpdateSipIpAccessControlListError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("FriendlyName", params.friendly_name.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateSipIpAccessControlListSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateSipIpAccessControlListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
