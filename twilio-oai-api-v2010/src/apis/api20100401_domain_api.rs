/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_sip_domain`]
#[derive(Clone, Debug)]
pub struct CreateSipDomainParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    pub account_sid: String,
    /// The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    pub domain_name: String,
    /// A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    pub friendly_name: Option<String>,
    /// The URL we should when the domain receives a call.
    pub voice_url: Option<String>,
    /// The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
    pub voice_method: Option<String>,
    /// The URL that we should call when an error occurs while retrieving or executing the TwiML from `voice_url`.
    pub voice_fallback_url: Option<String>,
    /// The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
    pub voice_fallback_method: Option<String>,
    /// The URL that we should call to pass status parameters (such as call ended) to your application.
    pub voice_status_callback_url: Option<String>,
    /// The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
    pub voice_status_callback_method: Option<String>,
    /// Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    pub sip_registration: Option<bool>,
    /// Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    pub emergency_calling_enabled: Option<bool>,
    /// Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    pub secure: Option<bool>,
    /// The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    pub byoc_trunk_sid: Option<String>,
    /// Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    pub emergency_caller_sid: Option<String>,
}

/// struct for passing parameters to the method [`delete_sip_domain`]
#[derive(Clone, Debug)]
pub struct DeleteSipDomainParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to delete.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the SipDomain resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_sip_domain`]
#[derive(Clone, Debug)]
pub struct FetchSipDomainParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to fetch.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the SipDomain resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_sip_domain`]
#[derive(Clone, Debug)]
pub struct ListSipDomainParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resources to read.
    pub account_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_sip_domain`]
#[derive(Clone, Debug)]
pub struct UpdateSipDomainParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the SipDomain resource to update.
    pub sid: String,
    /// A descriptive string that you created to describe the resource. It can be up to 64 characters long.
    pub friendly_name: Option<String>,
    /// The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
    pub voice_fallback_method: Option<String>,
    /// The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`.
    pub voice_fallback_url: Option<String>,
    /// The HTTP method we should use to call `voice_url`
    pub voice_method: Option<String>,
    /// The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`.
    pub voice_status_callback_method: Option<String>,
    /// The URL that we should call to pass status parameters (such as call ended) to your application.
    pub voice_status_callback_url: Option<String>,
    /// The URL we should call when the domain receives a call.
    pub voice_url: Option<String>,
    /// Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not.
    pub sip_registration: Option<bool>,
    /// The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\\"-\\\" and must end with `sip.twilio.com`.
    pub domain_name: Option<String>,
    /// Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses.
    pub emergency_calling_enabled: Option<bool>,
    /// Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain.
    pub secure: Option<bool>,
    /// The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with.
    pub byoc_trunk_sid: Option<String>,
    /// Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call.
    pub emergency_caller_sid: Option<String>,
}

/// struct for typed successes of method [`create_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSipDomainSuccess {
    Status201(models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipDomain),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSipDomainSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSipDomainSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipDomain),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSipDomainSuccess {
    Status200(models::ListSipDomainResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSipDomainSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipDomain),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSipDomainError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSipDomainError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSipDomainError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSipDomainError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_sip_domain`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSipDomainError {
    UnknownValue(serde_json::Value),
}

/// Create a new Domain
pub async fn create_sip_domain(
    configuration: &configuration::Configuration,
    params: CreateSipDomainParams,
) -> Result<ResponseContent<CreateSipDomainSuccess>, Error<CreateSipDomainError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("DomainName", params.domain_name.to_string());
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.voice_url {
        multipart_form_params.insert("VoiceUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_method {
        multipart_form_params.insert("VoiceMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_url {
        multipart_form_params.insert("VoiceFallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_method {
        multipart_form_params.insert("VoiceFallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_status_callback_url {
        multipart_form_params.insert("VoiceStatusCallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_status_callback_method {
        multipart_form_params.insert("VoiceStatusCallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.sip_registration {
        multipart_form_params.insert("SipRegistration", param_value.to_string());
    }
    if let Some(param_value) = params.emergency_calling_enabled {
        multipart_form_params.insert("EmergencyCallingEnabled", param_value.to_string());
    }
    if let Some(param_value) = params.secure {
        multipart_form_params.insert("Secure", param_value.to_string());
    }
    if let Some(param_value) = params.byoc_trunk_sid {
        multipart_form_params.insert("ByocTrunkSid", param_value.to_string());
    }
    if let Some(param_value) = params.emergency_caller_sid {
        multipart_form_params.insert("EmergencyCallerSid", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateSipDomainSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateSipDomainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete an instance of a Domain
pub async fn delete_sip_domain(
    configuration: &configuration::Configuration,
    params: DeleteSipDomainParams,
) -> Result<ResponseContent<DeleteSipDomainSuccess>, Error<DeleteSipDomainError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteSipDomainSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSipDomainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch an instance of a Domain
pub async fn fetch_sip_domain(
    configuration: &configuration::Configuration,
    params: FetchSipDomainParams,
) -> Result<ResponseContent<FetchSipDomainSuccess>, Error<FetchSipDomainError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchSipDomainSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchSipDomainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of domains belonging to the account used to make the request
pub async fn list_sip_domain(
    configuration: &configuration::Configuration,
    params: ListSipDomainParams,
) -> Result<ResponseContent<ListSipDomainSuccess>, Error<ListSipDomainError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListSipDomainSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListSipDomainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update the attributes of a domain
pub async fn update_sip_domain(
    configuration: &configuration::Configuration,
    params: UpdateSipDomainParams,
) -> Result<ResponseContent<UpdateSipDomainSuccess>, Error<UpdateSipDomainError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_method {
        multipart_form_params.insert("VoiceFallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_url {
        multipart_form_params.insert("VoiceFallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_method {
        multipart_form_params.insert("VoiceMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_status_callback_method {
        multipart_form_params.insert("VoiceStatusCallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_status_callback_url {
        multipart_form_params.insert("VoiceStatusCallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_url {
        multipart_form_params.insert("VoiceUrl", param_value.to_string());
    }
    if let Some(param_value) = params.sip_registration {
        multipart_form_params.insert("SipRegistration", param_value.to_string());
    }
    if let Some(param_value) = params.domain_name {
        multipart_form_params.insert("DomainName", param_value.to_string());
    }
    if let Some(param_value) = params.emergency_calling_enabled {
        multipart_form_params.insert("EmergencyCallingEnabled", param_value.to_string());
    }
    if let Some(param_value) = params.secure {
        multipart_form_params.insert("Secure", param_value.to_string());
    }
    if let Some(param_value) = params.byoc_trunk_sid {
        multipart_form_params.insert("ByocTrunkSid", param_value.to_string());
    }
    if let Some(param_value) = params.emergency_caller_sid {
        multipart_form_params.insert("EmergencyCallerSid", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateSipDomainSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateSipDomainError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
