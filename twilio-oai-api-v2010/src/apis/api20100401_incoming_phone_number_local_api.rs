/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_incoming_phone_number_local`]
#[derive(Clone, Debug)]
pub struct CreateIncomingPhoneNumberLocalParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    pub account_sid: String,
    /// The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
    pub phone_number: String,
    /// The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    pub api_version: Option<String>,
    /// A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    pub friendly_name: Option<String>,
    /// The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all of the `sms_*_url` urls and use those set on the application.
    pub sms_application_sid: Option<String>,
    /// The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
    pub sms_fallback_method: Option<String>,
    /// The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    pub sms_fallback_url: Option<String>,
    /// The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.
    pub sms_method: Option<String>,
    /// The URL we should call when the new phone number receives an incoming SMS message.
    pub sms_url: Option<String>,
    /// The URL we should call using the `status_callback_method` to send status information to your application.
    pub status_callback: Option<String>,
    /// The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
    pub status_callback_method: Option<String>,
    /// The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use only those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    pub voice_application_sid: Option<String>,
    /// Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    pub voice_caller_id_lookup: Option<bool>,
    /// The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
    pub voice_fallback_method: Option<String>,
    /// The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    pub voice_fallback_url: Option<String>,
    /// The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.
    pub voice_method: Option<String>,
    /// The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    pub voice_url: Option<String>,
    /// The SID of the Identity resource that we should associate with the new phone number. Some regions require an identity to meet local regulations.
    pub identity_sid: Option<String>,
    /// The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    pub address_sid: Option<String>,
    pub emergency_status: Option<models::IncomingPhoneNumberLocalEnumEmergencyStatus>,
    /// The SID of the emergency address configuration to use for emergency calling from the new phone number.
    pub emergency_address_sid: Option<String>,
    /// The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    pub trunk_sid: Option<String>,
    pub voice_receive_mode: Option<models::IncomingPhoneNumberLocalEnumVoiceReceiveMode>,
    /// The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.
    pub bundle_sid: Option<String>,
}

/// struct for passing parameters to the method [`list_incoming_phone_number_local`]
#[derive(Clone, Debug)]
pub struct ListIncomingPhoneNumberLocalParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
    pub account_sid: String,
    /// Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    pub beta: Option<bool>,
    /// A string that identifies the resources to read.
    pub friendly_name: Option<String>,
    /// The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    pub phone_number: Option<String>,
    /// Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    pub origin: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for typed successes of method [`create_incoming_phone_number_local`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateIncomingPhoneNumberLocalSuccess {
    Status201(
        models::ApiPeriodV2010PeriodAccountPeriodIncomingPhoneNumberPeriodIncomingPhoneNumberLocal,
    ),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_incoming_phone_number_local`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListIncomingPhoneNumberLocalSuccess {
    Status200(models::ListIncomingPhoneNumberLocalResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_incoming_phone_number_local`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateIncomingPhoneNumberLocalError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_incoming_phone_number_local`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListIncomingPhoneNumberLocalError {
    UnknownValue(serde_json::Value),
}

///
pub async fn create_incoming_phone_number_local(
    configuration: &configuration::Configuration,
    params: CreateIncomingPhoneNumberLocalParams,
) -> Result<
    ResponseContent<CreateIncomingPhoneNumberLocalSuccess>,
    Error<CreateIncomingPhoneNumberLocalError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("PhoneNumber", params.phone_number.to_string());
    if let Some(param_value) = params.api_version {
        multipart_form_params.insert("ApiVersion", param_value.to_string());
    }
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.sms_application_sid {
        multipart_form_params.insert("SmsApplicationSid", param_value.to_string());
    }
    if let Some(param_value) = params.sms_fallback_method {
        multipart_form_params.insert("SmsFallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.sms_fallback_url {
        multipart_form_params.insert("SmsFallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.sms_method {
        multipart_form_params.insert("SmsMethod", param_value.to_string());
    }
    if let Some(param_value) = params.sms_url {
        multipart_form_params.insert("SmsUrl", param_value.to_string());
    }
    if let Some(param_value) = params.status_callback {
        multipart_form_params.insert("StatusCallback", param_value.to_string());
    }
    if let Some(param_value) = params.status_callback_method {
        multipart_form_params.insert("StatusCallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_application_sid {
        multipart_form_params.insert("VoiceApplicationSid", param_value.to_string());
    }
    if let Some(param_value) = params.voice_caller_id_lookup {
        multipart_form_params.insert("VoiceCallerIdLookup", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_method {
        multipart_form_params.insert("VoiceFallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_url {
        multipart_form_params.insert("VoiceFallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_method {
        multipart_form_params.insert("VoiceMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_url {
        multipart_form_params.insert("VoiceUrl", param_value.to_string());
    }
    if let Some(param_value) = params.identity_sid {
        multipart_form_params.insert("IdentitySid", param_value.to_string());
    }
    if let Some(param_value) = params.address_sid {
        multipart_form_params.insert("AddressSid", param_value.to_string());
    }
    if let Some(param_value) = params.emergency_status {
        multipart_form_params.insert("EmergencyStatus", param_value.to_string());
    }
    if let Some(param_value) = params.emergency_address_sid {
        multipart_form_params.insert("EmergencyAddressSid", param_value.to_string());
    }
    if let Some(param_value) = params.trunk_sid {
        multipart_form_params.insert("TrunkSid", param_value.to_string());
    }
    if let Some(param_value) = params.voice_receive_mode {
        multipart_form_params.insert("VoiceReceiveMode", param_value.to_string());
    }
    if let Some(param_value) = params.bundle_sid {
        multipart_form_params.insert("BundleSid", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateIncomingPhoneNumberLocalSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateIncomingPhoneNumberLocalError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///
pub async fn list_incoming_phone_number_local(
    configuration: &configuration::Configuration,
    params: ListIncomingPhoneNumberLocalParams,
) -> Result<
    ResponseContent<ListIncomingPhoneNumberLocalSuccess>,
    Error<ListIncomingPhoneNumberLocalError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.beta {
        req_builder = req_builder.query(&[("Beta", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.friendly_name {
        req_builder = req_builder.query(&[("FriendlyName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.phone_number {
        req_builder = req_builder.query(&[("PhoneNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.origin {
        req_builder = req_builder.query(&[("Origin", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListIncomingPhoneNumberLocalSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListIncomingPhoneNumberLocalError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
