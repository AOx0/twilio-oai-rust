/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`fetch_short_code`]
#[derive(Clone, Debug)]
pub struct FetchShortCodeParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to fetch.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the ShortCode resource to fetch
    pub sid: String,
}

/// struct for passing parameters to the method [`list_short_code`]
#[derive(Clone, Debug)]
pub struct ListShortCodeParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to read.
    pub account_sid: String,
    /// The string that identifies the ShortCode resources to read.
    pub friendly_name: Option<String>,
    /// Only show the ShortCode resources that match this pattern. You can specify partial numbers and use '*' as a wildcard for any digit.
    pub short_code: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_short_code`]
#[derive(Clone, Debug)]
pub struct UpdateShortCodeParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ShortCode resource(s) to update.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the ShortCode resource to update
    pub sid: String,
    /// A descriptive string that you created to describe this resource. It can be up to 64 characters long. By default, the `FriendlyName` is the short code.
    pub friendly_name: Option<String>,
    /// The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`.
    pub api_version: Option<String>,
    /// The URL we should call when receiving an incoming SMS message to this short code.
    pub sms_url: Option<String>,
    /// The HTTP method we should use when calling the `sms_url`. Can be: `GET` or `POST`.
    pub sms_method: Option<String>,
    /// The URL that we should call if an error occurs while retrieving or executing the TwiML from `sms_url`.
    pub sms_fallback_url: Option<String>,
    /// The HTTP method that we should use to call the `sms_fallback_url`. Can be: `GET` or `POST`.
    pub sms_fallback_method: Option<String>,
}

/// struct for typed successes of method [`fetch_short_code`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchShortCodeSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodShortCode),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_short_code`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListShortCodeSuccess {
    Status200(models::ListShortCodeResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_short_code`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateShortCodeSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodShortCode),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_short_code`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchShortCodeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_short_code`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListShortCodeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_short_code`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateShortCodeError {
    UnknownValue(serde_json::Value),
}

/// Fetch an instance of a short code
pub async fn fetch_short_code(
    configuration: &configuration::Configuration,
    params: FetchShortCodeParams,
) -> Result<ResponseContent<FetchShortCodeSuccess>, Error<FetchShortCodeError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchShortCodeSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchShortCodeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of short-codes belonging to the account used to make the request
pub async fn list_short_code(
    configuration: &configuration::Configuration,
    params: ListShortCodeParams,
) -> Result<ResponseContent<ListShortCodeSuccess>, Error<ListShortCodeError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.friendly_name {
        req_builder = req_builder.query(&[("FriendlyName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.short_code {
        req_builder = req_builder.query(&[("ShortCode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListShortCodeSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListShortCodeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update a short code with the following parameters
pub async fn update_short_code(
    configuration: &configuration::Configuration,
    params: UpdateShortCodeParams,
) -> Result<ResponseContent<UpdateShortCodeSuccess>, Error<UpdateShortCodeError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.api_version {
        multipart_form_params.insert("ApiVersion", param_value.to_string());
    }
    if let Some(param_value) = params.sms_url {
        multipart_form_params.insert("SmsUrl", param_value.to_string());
    }
    if let Some(param_value) = params.sms_method {
        multipart_form_params.insert("SmsMethod", param_value.to_string());
    }
    if let Some(param_value) = params.sms_fallback_url {
        multipart_form_params.insert("SmsFallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.sms_fallback_method {
        multipart_form_params.insert("SmsFallbackMethod", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateShortCodeSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateShortCodeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
