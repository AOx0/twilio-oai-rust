/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};
use serde_json;

/// struct for passing parameters to the method [`create_payments`]
#[derive(Clone, Debug)]
pub struct CreatePaymentsParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    pub account_sid: String,
    /// The SID of the call that will create the resource. Call leg associated with this sid is expected to provide payment information thru DTMF.
    pub call_sid: String,
    /// A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    pub idempotency_key: String,
    /// Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [expected StatusCallback values](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback)
    pub status_callback: String,
    pub bank_account_type: Option<models::PaymentsEnumBankAccountType>,
    /// A positive decimal value less than 1,000,000 to charge against the credit card or bank account. Default currency can be overwritten with `currency` field. Leave blank or set to 0 to tokenize.
    pub charge_amount: Option<f64>,
    /// The currency of the `charge_amount`, formatted as [ISO 4127](http://www.iso.org/iso/home/standards/currency_codes.htm) format. The default value is `USD` and all values allowed from the Pay Connector are accepted.
    pub currency: Option<String>,
    /// The description can be used to provide more details regarding the transaction. This information is submitted along with the payment details to the Payment Connector which are then posted on the transactions.
    pub description: Option<String>,
    /// A list of inputs that should be accepted. Currently only `dtmf` is supported. All digits captured during a pay session are redacted from the logs.
    pub input: Option<String>,
    /// A positive integer that is used to validate the length of the `PostalCode` inputted by the user. User must enter this many digits.
    pub min_postal_code_length: Option<i32>,
    /// A single-level JSON object used to pass custom parameters to payment processors. (Required for ACH payments). The information that has to be included here depends on the <Pay> Connector. [Read more](https://www.twilio.com/console/voice/pay-connectors).
    pub parameter: Option<serde_json::Value>,
    /// This is the unique name corresponding to the Pay Connector installed in the Twilio Add-ons. Learn more about [<Pay> Connectors](https://www.twilio.com/console/voice/pay-connectors). The default value is `Default`.
    pub payment_connector: Option<String>,
    pub payment_method: Option<models::PaymentsEnumPaymentMethod>,
    /// Indicates whether the credit card postal code (zip code) is a required piece of payment information that must be provided by the caller. The default is `true`.
    pub postal_code: Option<bool>,
    /// Indicates whether the credit card security code is a required piece of payment information that must be provided by the caller. The default is `true`.
    pub security_code: Option<bool>,
    /// The number of seconds that <Pay> should wait for the caller to press a digit between each subsequent digit, after the first one, before moving on to validate the digits captured. The default is `5`, maximum is `600`.
    pub timeout: Option<i32>,
    pub token_type: Option<models::PaymentsEnumTokenType>,
    /// Credit card types separated by space that Pay should accept. The default value is `visa mastercard amex`
    pub valid_card_types: Option<String>,
}

/// struct for passing parameters to the method [`update_payments`]
#[derive(Clone, Debug)]
pub struct UpdatePaymentsParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will update the resource.
    pub account_sid: String,
    /// The SID of the call that will update the resource. This should be the same call sid that was used to create payments resource.
    pub call_sid: String,
    /// The SID of Payments session that needs to be updated.
    pub sid: String,
    /// A unique token that will be used to ensure that multiple API calls with the same information do not result in multiple transactions. This should be a unique string value per API call and can be a randomly generated.
    pub idempotency_key: String,
    /// Provide an absolute or relative URL to receive status updates regarding your Pay session. Read more about the [Update](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-update) and [Complete/Cancel](https://www.twilio.com/docs/voice/api/payment-resource#statuscallback-cancelcomplete) POST requests.
    pub status_callback: String,
    pub capture: Option<models::PaymentsEnumCapture>,
    pub status: Option<models::PaymentsEnumStatus>,
}

/// struct for typed successes of method [`create_payments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePaymentsSuccess {
    Status201(models::ApiPeriodV2010PeriodAccountPeriodCallPeriodPayments),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_payments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePaymentsSuccess {
    Status202(models::ApiPeriodV2010PeriodAccountPeriodCallPeriodPayments),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_payments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePaymentsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_payments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePaymentsError {
    UnknownValue(serde_json::Value),
}

/// create an instance of payments. This will start a new payments session
pub async fn create_payments(
    configuration: &configuration::Configuration,
    params: CreatePaymentsParams,
) -> Result<ResponseContent<CreatePaymentsSuccess>, Error<CreatePaymentsError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("IdempotencyKey", params.idempotency_key.to_string());
    multipart_form_params.insert("StatusCallback", params.status_callback.to_string());
    if let Some(param_value) = params.bank_account_type {
        multipart_form_params.insert("BankAccountType", param_value.to_string());
    }
    if let Some(param_value) = params.charge_amount {
        multipart_form_params.insert("ChargeAmount", param_value.to_string());
    }
    if let Some(param_value) = params.currency {
        multipart_form_params.insert("Currency", param_value.to_string());
    }
    if let Some(param_value) = params.description {
        multipart_form_params.insert("Description", param_value.to_string());
    }
    if let Some(param_value) = params.input {
        multipart_form_params.insert("Input", param_value.to_string());
    }
    if let Some(param_value) = params.min_postal_code_length {
        multipart_form_params.insert("MinPostalCodeLength", param_value.to_string());
    }
    if let Some(param_value) = params.parameter {
        multipart_form_params.insert("Parameter", param_value.to_string());
    }
    if let Some(param_value) = params.payment_connector {
        multipart_form_params.insert("PaymentConnector", param_value.to_string());
    }
    if let Some(param_value) = params.payment_method {
        multipart_form_params.insert("PaymentMethod", param_value.to_string());
    }
    if let Some(param_value) = params.postal_code {
        multipart_form_params.insert("PostalCode", param_value.to_string());
    }
    if let Some(param_value) = params.security_code {
        multipart_form_params.insert("SecurityCode", param_value.to_string());
    }
    if let Some(param_value) = params.timeout {
        multipart_form_params.insert("Timeout", param_value.to_string());
    }
    if let Some(param_value) = params.token_type {
        multipart_form_params.insert("TokenType", param_value.to_string());
    }
    if let Some(param_value) = params.valid_card_types {
        multipart_form_params.insert("ValidCardTypes", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreatePaymentsSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreatePaymentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// update an instance of payments with different phases of payment flows.
pub async fn update_payments(
    configuration: &configuration::Configuration,
    params: UpdatePaymentsParams,
) -> Result<ResponseContent<UpdatePaymentsSuccess>, Error<UpdatePaymentsError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        CallSid = crate::apis::urlencode(params.call_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("IdempotencyKey", params.idempotency_key.to_string());
    multipart_form_params.insert("StatusCallback", params.status_callback.to_string());
    if let Some(param_value) = params.capture {
        multipart_form_params.insert("Capture", param_value.to_string());
    }
    if let Some(param_value) = params.status {
        multipart_form_params.insert("Status", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdatePaymentsSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdatePaymentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
