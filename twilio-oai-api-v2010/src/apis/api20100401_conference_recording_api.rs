/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`delete_conference_recording`]
#[derive(Clone, Debug)]
pub struct DeleteConferenceRecordingParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
    pub account_sid: String,
    /// The Conference SID that identifies the conference associated with the recording to delete.
    pub conference_sid: String,
    /// The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_conference_recording`]
#[derive(Clone, Debug)]
pub struct FetchConferenceRecordingParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
    pub account_sid: String,
    /// The Conference SID that identifies the conference associated with the recording to fetch.
    pub conference_sid: String,
    /// The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_conference_recording`]
#[derive(Clone, Debug)]
pub struct ListConferenceRecordingParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
    pub account_sid: String,
    /// The Conference SID that identifies the conference associated with the recording to read.
    pub conference_sid: String,
    /// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    pub date_created: Option<String>,
    /// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    pub date_created_less_than: Option<String>,
    /// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    pub date_created_greater_than: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_conference_recording`]
#[derive(Clone, Debug)]
pub struct UpdateConferenceRecordingParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
    pub account_sid: String,
    /// The Conference SID that identifies the conference associated with the recording to update.
    pub conference_sid: String,
    /// The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
    pub sid: String,
    pub status: models::ConferenceRecordingEnumStatus,
    /// Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.
    pub pause_behavior: Option<String>,
}

/// struct for typed successes of method [`delete_conference_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteConferenceRecordingSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_conference_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchConferenceRecordingSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodConferencePeriodConferenceRecording),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_conference_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListConferenceRecordingSuccess {
    Status200(models::ListConferenceRecordingResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_conference_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateConferenceRecordingSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodConferencePeriodConferenceRecording),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_conference_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteConferenceRecordingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_conference_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchConferenceRecordingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_conference_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListConferenceRecordingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_conference_recording`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateConferenceRecordingError {
    UnknownValue(serde_json::Value),
}

/// Delete a recording from your account
pub async fn delete_conference_recording(
    configuration: &configuration::Configuration,
    params: DeleteConferenceRecordingParams,
) -> Result<ResponseContent<DeleteConferenceRecordingSuccess>, Error<DeleteConferenceRecordingError>>
{
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        ConferenceSid = crate::apis::urlencode(params.conference_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteConferenceRecordingSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteConferenceRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch an instance of a recording for a call
pub async fn fetch_conference_recording(
    configuration: &configuration::Configuration,
    params: FetchConferenceRecordingParams,
) -> Result<ResponseContent<FetchConferenceRecordingSuccess>, Error<FetchConferenceRecordingError>>
{
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        ConferenceSid = crate::apis::urlencode(params.conference_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchConferenceRecordingSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchConferenceRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of recordings belonging to the call used to make the request
pub async fn list_conference_recording(
    configuration: &configuration::Configuration,
    params: ListConferenceRecordingParams,
) -> Result<ResponseContent<ListConferenceRecordingSuccess>, Error<ListConferenceRecordingError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        ConferenceSid = crate::apis::urlencode(params.conference_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.date_created {
        req_builder = req_builder.query(&[("DateCreated", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_created_less_than {
        req_builder = req_builder.query(&[("DateCreated<", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_created_greater_than {
        req_builder = req_builder.query(&[("DateCreated>", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListConferenceRecordingSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListConferenceRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Changes the status of the recording to paused, stopped, or in-progress. Note: To use `Twilio.CURRENT`, pass it as recording sid.
pub async fn update_conference_recording(
    configuration: &configuration::Configuration,
    params: UpdateConferenceRecordingParams,
) -> Result<ResponseContent<UpdateConferenceRecordingSuccess>, Error<UpdateConferenceRecordingError>>
{
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        ConferenceSid = crate::apis::urlencode(params.conference_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("Status", params.status.to_string());
    if let Some(param_value) = params.pause_behavior {
        multipart_form_params.insert("PauseBehavior", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateConferenceRecordingSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateConferenceRecordingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
