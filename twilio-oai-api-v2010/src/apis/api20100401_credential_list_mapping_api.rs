/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_sip_credential_list_mapping`]
#[derive(Clone, Debug)]
pub struct CreateSipCredentialListMappingParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A 34 character string that uniquely identifies the SIP Domain for which the CredentialList resource will be mapped.
    pub domain_sid: String,
    /// A 34 character string that uniquely identifies the CredentialList resource to map to the SIP domain.
    pub credential_list_sid: String,
}

/// struct for passing parameters to the method [`delete_sip_credential_list_mapping`]
#[derive(Clone, Debug)]
pub struct DeleteSipCredentialListMappingParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A 34 character string that uniquely identifies the SIP Domain that includes the resource to delete.
    pub domain_sid: String,
    /// A 34 character string that uniquely identifies the resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_sip_credential_list_mapping`]
#[derive(Clone, Debug)]
pub struct FetchSipCredentialListMappingParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A 34 character string that uniquely identifies the SIP Domain that includes the resource to fetch.
    pub domain_sid: String,
    /// A 34 character string that uniquely identifies the resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_sip_credential_list_mapping`]
#[derive(Clone, Debug)]
pub struct ListSipCredentialListMappingParams {
    /// The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
    pub account_sid: String,
    /// A 34 character string that uniquely identifies the SIP Domain that includes the resource to read.
    pub domain_sid: String,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for typed successes of method [`create_sip_credential_list_mapping`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSipCredentialListMappingSuccess {
    Status201(
        models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipDomainPeriodSipCredentialListMapping,
    ),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_sip_credential_list_mapping`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSipCredentialListMappingSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_sip_credential_list_mapping`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSipCredentialListMappingSuccess {
    Status200(
        models::ApiPeriodV2010PeriodAccountPeriodSipPeriodSipDomainPeriodSipCredentialListMapping,
    ),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_sip_credential_list_mapping`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSipCredentialListMappingSuccess {
    Status200(models::ListSipCredentialListMappingResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_sip_credential_list_mapping`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSipCredentialListMappingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_sip_credential_list_mapping`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSipCredentialListMappingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_sip_credential_list_mapping`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSipCredentialListMappingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_sip_credential_list_mapping`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSipCredentialListMappingError {
    UnknownValue(serde_json::Value),
}

/// Create a CredentialListMapping resource for an account.
pub async fn create_sip_credential_list_mapping(
    configuration: &configuration::Configuration,
    params: CreateSipCredentialListMappingParams,
) -> Result<
    ResponseContent<CreateSipCredentialListMappingSuccess>,
    Error<CreateSipCredentialListMappingError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        DomainSid = crate::apis::urlencode(params.domain_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("CredentialListSid", params.credential_list_sid.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateSipCredentialListMappingSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateSipCredentialListMappingError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete a CredentialListMapping resource from an account.
pub async fn delete_sip_credential_list_mapping(
    configuration: &configuration::Configuration,
    params: DeleteSipCredentialListMappingParams,
) -> Result<
    ResponseContent<DeleteSipCredentialListMappingSuccess>,
    Error<DeleteSipCredentialListMappingError>,
> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), DomainSid=crate::apis::urlencode(params.domain_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteSipCredentialListMappingSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSipCredentialListMappingError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch a single CredentialListMapping resource from an account.
pub async fn fetch_sip_credential_list_mapping(
    configuration: &configuration::Configuration,
    params: FetchSipCredentialListMappingParams,
) -> Result<
    ResponseContent<FetchSipCredentialListMappingSuccess>,
    Error<FetchSipCredentialListMappingError>,
> {
    let uri_str = format!("{}/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json", configuration.base_path, AccountSid=crate::apis::urlencode(params.account_sid), DomainSid=crate::apis::urlencode(params.domain_sid), Sid=crate::apis::urlencode(params.sid));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchSipCredentialListMappingSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchSipCredentialListMappingError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Read multiple CredentialListMapping resources from an account.
pub async fn list_sip_credential_list_mapping(
    configuration: &configuration::Configuration,
    params: ListSipCredentialListMappingParams,
) -> Result<
    ResponseContent<ListSipCredentialListMappingSuccess>,
    Error<ListSipCredentialListMappingError>,
> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        DomainSid = crate::apis::urlencode(params.domain_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListSipCredentialListMappingSuccess> =
            serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListSipCredentialListMappingError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
