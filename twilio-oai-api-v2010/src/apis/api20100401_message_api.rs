/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_message`]
#[derive(Clone, Debug)]
pub struct CreateMessageParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) creating the Message resource.
    pub account_sid: String,
    /// The recipient's phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (for SMS/MMS) or [channel address](https://www.twilio.com/docs/messaging/channels), e.g. `whatsapp:+15552229999`.
    pub to: String,
    /// The URL of the endpoint to which Twilio sends [Message status callback requests](https://www.twilio.com/docs/sms/api/message-resource#twilios-request-to-the-statuscallback-url). URL must contain a valid hostname and underscores are not allowed. If you include this parameter with the `messaging_service_sid`, Twilio uses this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource).
    pub status_callback: Option<String>,
    /// The SID of the associated [TwiML Application](https://www.twilio.com/docs/usage/api/applications). [Message status callback requests](https://www.twilio.com/docs/sms/api/message-resource#twilios-request-to-the-statuscallback-url) are sent to the TwiML App's `message_status_callback` URL. Note that the `status_callback` parameter of a request takes priority over the `application_sid` parameter; if both are included `application_sid` is ignored.
    pub application_sid: Option<String>,
    /// [OBSOLETE] This parameter will no longer have any effect as of 2024-06-03.
    pub max_price: Option<f64>,
    /// Boolean indicating whether or not you intend to provide delivery confirmation feedback to Twilio (used in conjunction with the [Message Feedback subresource](https://www.twilio.com/docs/sms/api/message-feedback-resource)). Default value is `false`.
    pub provide_feedback: Option<bool>,
    /// Total number of attempts made (including this request) to send the message regardless of the provider used
    pub attempt: Option<i32>,
    /// The maximum length in seconds that the Message can remain in Twilio's outgoing message queue. If a queued Message exceeds the `validity_period`, the Message is not sent. Accepted values are integers from `1` to `36000`. Default value is `36000`. A `validity_period` greater than `5` is recommended. [Learn more about the validity period](https://www.twilio.com/blog/take-more-control-of-outbound-messages-using-validity-period-html)
    pub validity_period: Option<i32>,
    /// Reserved
    pub force_delivery: Option<bool>,
    pub content_retention: Option<models::MessageEnumContentRetention>,
    pub address_retention: Option<models::MessageEnumAddressRetention>,
    /// Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
    pub smart_encoded: Option<bool>,
    /// Rich actions for non-SMS/MMS channels. Used for [sending location in WhatsApp messages](https://www.twilio.com/docs/whatsapp/message-features#location-messages-with-whatsapp).
    pub persistent_action: Option<Vec<String>>,
    pub traffic_type: Option<models::MessageEnumTrafficType>,
    /// For Messaging Services with [Link Shortening configured](https://www.twilio.com/docs/messaging/features/link-shortening) only: A Boolean indicating whether or not Twilio should shorten links in the `body` of the Message. Default value is `false`. If `true`, the `messaging_service_sid` parameter must also be provided.
    pub shorten_urls: Option<bool>,
    pub schedule_type: Option<models::MessageEnumScheduleType>,
    /// The time that Twilio will send the message. Must be in ISO 8601 format.
    pub send_at: Option<String>,
    /// If set to `true`, Twilio delivers the message as a single MMS message, regardless of the presence of media.
    pub send_as_mms: Option<bool>,
    /// For [Content Editor/API](https://www.twilio.com/docs/content) only: Key-value pairs of [Template variables](https://www.twilio.com/docs/content/using-variables-with-content-api) and their substitution values. `content_sid` parameter must also be provided. If values are not defined in the `content_variables` parameter, the [Template's default placeholder values](https://www.twilio.com/docs/content/content-api-resources#create-templates) are used.
    pub content_variables: Option<String>,
    pub risk_check: Option<models::MessageEnumRiskCheck>,
    /// The sender's Twilio phone number (in [E.164](https://en.wikipedia.org/wiki/E.164) format), [alphanumeric sender ID](https://www.twilio.com/docs/sms/quickstart), [Wireless SIM](https://www.twilio.com/docs/iot/wireless/programmable-wireless-send-machine-machine-sms-commands), [short code](https://www.twilio.com/en-us/messaging/channels/sms/short-codes), or [channel address](https://www.twilio.com/docs/messaging/channels) (e.g., `whatsapp:+15554449999`). The value of the `from` parameter must be a sender that is hosted within Twilio and belongs to the Account creating the Message. If you are using `messaging_service_sid`, this parameter can be empty (Twilio assigns a `from` value from the Messaging Service's Sender Pool) or you can provide a specific sender from your Sender Pool.
    pub from: Option<String>,
    /// The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services) you want to associate with the Message. When this parameter is provided and the `from` parameter is omitted, Twilio selects the optimal sender from the Messaging Service's Sender Pool. You may also provide a `from` parameter if you want to use a specific Sender from the Sender Pool.
    pub messaging_service_sid: Option<String>,
    /// The text content of the outgoing message. Can be up to 1,600 characters in length. SMS only: If the `body` contains more than 160 [GSM-7](https://www.twilio.com/docs/glossary/what-is-gsm-7-character-encoding) characters (or 70 [UCS-2](https://www.twilio.com/docs/glossary/what-is-ucs-2-character-encoding) characters), the message is segmented and charged accordingly. For long `body` text, consider using the [send_as_mms parameter](https://www.twilio.com/blog/mms-for-long-text-messages).
    pub body: Option<String>,
    /// The URL of media to include in the Message content. `jpeg`, `jpg`, `gif`, and `png` file types are fully supported by Twilio and content is formatted for delivery on destination devices. The media size limit is 5 MB for supported file types (`jpeg`, `jpg`, `png`, `gif`) and 500 KB for [other types](https://www.twilio.com/docs/messaging/guides/accepted-mime-types) of accepted media. To send more than one image in the message, provide multiple `media_url` parameters in the POST request. You can include up to ten `media_url` parameters per message. [International](https://support.twilio.com/hc/en-us/articles/223179808-Sending-and-receiving-MMS-messages) and [carrier](https://support.twilio.com/hc/en-us/articles/223133707-Is-MMS-supported-for-all-carriers-in-US-and-Canada-) limits apply.
    pub media_url: Option<Vec<String>>,
    /// For [Content Editor/API](https://www.twilio.com/docs/content) only: The SID of the Content Template to be used with the Message, e.g., `HXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`. If this parameter is not provided, a Content Template is not used. Find the SID in the Console on the Content Editor page. For Content API users, the SID is found in Twilio's response when [creating the Template](https://www.twilio.com/docs/content/content-api-resources#create-templates) or by [fetching your Templates](https://www.twilio.com/docs/content/content-api-resources#fetch-all-content-resources).
    pub content_sid: Option<String>,
}

/// struct for passing parameters to the method [`delete_message`]
#[derive(Clone, Debug)]
pub struct DeleteMessageParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resource
    pub account_sid: String,
    /// The SID of the Message resource you wish to delete
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_message`]
#[derive(Clone, Debug)]
pub struct FetchMessageParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resource
    pub account_sid: String,
    /// The SID of the Message resource to be fetched
    pub sid: String,
}

/// struct for passing parameters to the method [`list_message`]
#[derive(Clone, Debug)]
pub struct ListMessageParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resources.
    pub account_sid: String,
    /// Filter by recipient. For example: Set this `to` parameter to `+15558881111` to retrieve a list of Message resources with `to` properties of `+15558881111`
    pub to: Option<String>,
    /// Filter by sender. For example: Set this `from` parameter to `+15552229999` to retrieve a list of Message resources with `from` properties of `+15552229999`
    pub from: Option<String>,
    /// Filter by Message `sent_date`. Accepts GMT dates in the following formats: `YYYY-MM-DD` (to find Messages with a specific `sent_date`), `<=YYYY-MM-DD` (to find Messages with `sent_date`s on and before a specific date), and `>=YYYY-MM-DD` (to find Messages with `sent_dates` on and after a specific date).
    pub date_sent: Option<String>,
    /// Filter by Message `sent_date`. Accepts GMT dates in the following formats: `YYYY-MM-DD` (to find Messages with a specific `sent_date`), `<=YYYY-MM-DD` (to find Messages with `sent_date`s on and before a specific date), and `>=YYYY-MM-DD` (to find Messages with `sent_dates` on and after a specific date).
    pub date_sent_less_than: Option<String>,
    /// Filter by Message `sent_date`. Accepts GMT dates in the following formats: `YYYY-MM-DD` (to find Messages with a specific `sent_date`), `<=YYYY-MM-DD` (to find Messages with `sent_date`s on and before a specific date), and `>=YYYY-MM-DD` (to find Messages with `sent_dates` on and after a specific date).
    pub date_sent_greater_than: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_message`]
#[derive(Clone, Debug)]
pub struct UpdateMessageParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
    pub account_sid: String,
    /// The SID of the Message resource to be updated
    pub sid: String,
    /// The new `body` of the Message resource. To redact the text content of a Message, this parameter's value must be an empty string
    pub body: Option<String>,
    pub status: Option<models::MessageEnumUpdateStatus>,
}

/// struct for typed successes of method [`create_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateMessageSuccess {
    Status201(models::ApiPeriodV2010PeriodAccountPeriodMessage),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteMessageSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchMessageSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodMessage),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListMessageSuccess {
    Status200(models::ListMessageResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateMessageSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodMessage),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateMessageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteMessageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchMessageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListMessageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateMessageError {
    UnknownValue(serde_json::Value),
}

/// Send a message
pub async fn create_message(
    configuration: &configuration::Configuration,
    params: CreateMessageParams,
) -> Result<ResponseContent<CreateMessageSuccess>, Error<CreateMessageError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Messages.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("To", params.to.to_string());
    if let Some(param_value) = params.status_callback {
        multipart_form_params.insert("StatusCallback", param_value.to_string());
    }
    if let Some(param_value) = params.application_sid {
        multipart_form_params.insert("ApplicationSid", param_value.to_string());
    }
    if let Some(param_value) = params.max_price {
        multipart_form_params.insert("MaxPrice", param_value.to_string());
    }
    if let Some(param_value) = params.provide_feedback {
        multipart_form_params.insert("ProvideFeedback", param_value.to_string());
    }
    if let Some(param_value) = params.attempt {
        multipart_form_params.insert("Attempt", param_value.to_string());
    }
    if let Some(param_value) = params.validity_period {
        multipart_form_params.insert("ValidityPeriod", param_value.to_string());
    }
    if let Some(param_value) = params.force_delivery {
        multipart_form_params.insert("ForceDelivery", param_value.to_string());
    }
    if let Some(param_value) = params.content_retention {
        multipart_form_params.insert("ContentRetention", param_value.to_string());
    }
    if let Some(param_value) = params.address_retention {
        multipart_form_params.insert("AddressRetention", param_value.to_string());
    }
    if let Some(param_value) = params.smart_encoded {
        multipart_form_params.insert("SmartEncoded", param_value.to_string());
    }
    if let Some(param_value) = params.persistent_action {
        multipart_form_params.insert(
            "PersistentAction",
            param_value
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        );
    }
    if let Some(param_value) = params.traffic_type {
        multipart_form_params.insert("TrafficType", param_value.to_string());
    }
    if let Some(param_value) = params.shorten_urls {
        multipart_form_params.insert("ShortenUrls", param_value.to_string());
    }
    if let Some(param_value) = params.schedule_type {
        multipart_form_params.insert("ScheduleType", param_value.to_string());
    }
    if let Some(param_value) = params.send_at {
        multipart_form_params.insert("SendAt", param_value.to_string());
    }
    if let Some(param_value) = params.send_as_mms {
        multipart_form_params.insert("SendAsMms", param_value.to_string());
    }
    if let Some(param_value) = params.content_variables {
        multipart_form_params.insert("ContentVariables", param_value.to_string());
    }
    if let Some(param_value) = params.risk_check {
        multipart_form_params.insert("RiskCheck", param_value.to_string());
    }
    if let Some(param_value) = params.from {
        multipart_form_params.insert("From", param_value.to_string());
    }
    if let Some(param_value) = params.messaging_service_sid {
        multipart_form_params.insert("MessagingServiceSid", param_value.to_string());
    }
    if let Some(param_value) = params.body {
        multipart_form_params.insert("Body", param_value.to_string());
    }
    if let Some(param_value) = params.media_url {
        multipart_form_params.insert(
            "MediaUrl",
            param_value
                .into_iter()
                .map(|p| p.to_string())
                .collect::<Vec<String>>()
                .join(",")
                .to_string(),
        );
    }
    if let Some(param_value) = params.content_sid {
        multipart_form_params.insert("ContentSid", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateMessageSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateMessageError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Deletes a Message resource from your account
pub async fn delete_message(
    configuration: &configuration::Configuration,
    params: DeleteMessageParams,
) -> Result<ResponseContent<DeleteMessageSuccess>, Error<DeleteMessageError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteMessageSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteMessageError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch a specific Message
pub async fn fetch_message(
    configuration: &configuration::Configuration,
    params: FetchMessageParams,
) -> Result<ResponseContent<FetchMessageSuccess>, Error<FetchMessageError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchMessageSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchMessageError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of Message resources associated with a Twilio Account
pub async fn list_message(
    configuration: &configuration::Configuration,
    params: ListMessageParams,
) -> Result<ResponseContent<ListMessageSuccess>, Error<ListMessageError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Messages.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.to {
        req_builder = req_builder.query(&[("To", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.from {
        req_builder = req_builder.query(&[("From", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_sent {
        req_builder = req_builder.query(&[("DateSent", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_sent_less_than {
        req_builder = req_builder.query(&[("DateSent<", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_sent_greater_than {
        req_builder = req_builder.query(&[("DateSent>", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListMessageSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListMessageError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update a Message resource (used to redact Message `body` text and to cancel not-yet-sent messages)
pub async fn update_message(
    configuration: &configuration::Configuration,
    params: UpdateMessageParams,
) -> Result<ResponseContent<UpdateMessageSuccess>, Error<UpdateMessageError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.body {
        multipart_form_params.insert("Body", param_value.to_string());
    }
    if let Some(param_value) = params.status {
        multipart_form_params.insert("Status", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateMessageSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateMessageError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
