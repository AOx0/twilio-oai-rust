/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`fetch_conference`]
#[derive(Clone, Debug)]
pub struct FetchConferenceParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the Conference resource to fetch
    pub sid: String,
}

/// struct for passing parameters to the method [`list_conference`]
#[derive(Clone, Debug)]
pub struct ListConferenceParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
    pub account_sid: String,
    /// Only include conferences that were created on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read conferences that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read conferences that were created on or after midnight of this date.
    pub date_created: Option<String>,
    /// Only include conferences that were created on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read conferences that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read conferences that were created on or after midnight of this date.
    pub date_created_less_than: Option<String>,
    /// Only include conferences that were created on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read conferences that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read conferences that were created on or after midnight of this date.
    pub date_created_greater_than: Option<String>,
    /// Only include conferences that were last updated on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were last updated on this date. You can also specify an inequality, such as `DateUpdated<=YYYY-MM-DD`, to read conferences that were last updated on or before midnight of this date, and `DateUpdated>=YYYY-MM-DD` to read conferences that were last updated on or after midnight of this date.
    pub date_updated: Option<String>,
    /// Only include conferences that were last updated on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were last updated on this date. You can also specify an inequality, such as `DateUpdated<=YYYY-MM-DD`, to read conferences that were last updated on or before midnight of this date, and `DateUpdated>=YYYY-MM-DD` to read conferences that were last updated on or after midnight of this date.
    pub date_updated_less_than: Option<String>,
    /// Only include conferences that were last updated on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were last updated on this date. You can also specify an inequality, such as `DateUpdated<=YYYY-MM-DD`, to read conferences that were last updated on or before midnight of this date, and `DateUpdated>=YYYY-MM-DD` to read conferences that were last updated on or after midnight of this date.
    pub date_updated_greater_than: Option<String>,
    /// The string that identifies the Conference resources to read.
    pub friendly_name: Option<String>,
    /// The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
    pub status: Option<models::ConferenceEnumStatus>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_conference`]
#[derive(Clone, Debug)]
pub struct UpdateConferenceParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the Conference resource to update
    pub sid: String,
    pub status: Option<models::ConferenceEnumUpdateStatus>,
    /// The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    pub announce_url: Option<String>,
    /// The HTTP method used to call `announce_url`. Can be: `GET` or `POST` and the default is `POST`
    pub announce_method: Option<String>,
}

/// struct for typed successes of method [`fetch_conference`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchConferenceSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodConference),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_conference`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListConferenceSuccess {
    Status200(models::ListConferenceResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_conference`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateConferenceSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodConference),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_conference`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchConferenceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_conference`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListConferenceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_conference`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateConferenceError {
    UnknownValue(serde_json::Value),
}

/// Fetch an instance of a conference
pub async fn fetch_conference(
    configuration: &configuration::Configuration,
    params: FetchConferenceParams,
) -> Result<ResponseContent<FetchConferenceSuccess>, Error<FetchConferenceError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchConferenceSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchConferenceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of conferences belonging to the account used to make the request
pub async fn list_conference(
    configuration: &configuration::Configuration,
    params: ListConferenceParams,
) -> Result<ResponseContent<ListConferenceSuccess>, Error<ListConferenceError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Conferences.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.date_created {
        req_builder = req_builder.query(&[("DateCreated", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_created_less_than {
        req_builder = req_builder.query(&[("DateCreated<", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_created_greater_than {
        req_builder = req_builder.query(&[("DateCreated>", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_updated {
        req_builder = req_builder.query(&[("DateUpdated", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_updated_less_than {
        req_builder = req_builder.query(&[("DateUpdated<", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.date_updated_greater_than {
        req_builder = req_builder.query(&[("DateUpdated>", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.friendly_name {
        req_builder = req_builder.query(&[("FriendlyName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.status {
        req_builder = req_builder.query(&[("Status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListConferenceSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListConferenceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///
pub async fn update_conference(
    configuration: &configuration::Configuration,
    params: UpdateConferenceParams,
) -> Result<ResponseContent<UpdateConferenceSuccess>, Error<UpdateConferenceError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.status {
        multipart_form_params.insert("Status", param_value.to_string());
    }
    if let Some(param_value) = params.announce_url {
        multipart_form_params.insert("AnnounceUrl", param_value.to_string());
    }
    if let Some(param_value) = params.announce_method {
        multipart_form_params.insert("AnnounceMethod", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateConferenceSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateConferenceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
