/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_application`]
#[derive(Clone, Debug)]
pub struct CreateApplicationParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
    pub account_sid: String,
    /// The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
    pub api_version: Option<String>,
    /// The URL we should call when the phone number assigned to this application receives a call.
    pub voice_url: Option<String>,
    /// The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
    pub voice_method: Option<String>,
    /// The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    pub voice_fallback_url: Option<String>,
    /// The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
    pub voice_fallback_method: Option<String>,
    /// The URL we should call using the `status_callback_method` to send status information to your application.
    pub status_callback: Option<String>,
    /// The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.
    pub status_callback_method: Option<String>,
    /// Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    pub voice_caller_id_lookup: Option<bool>,
    /// The URL we should call when the phone number receives an incoming SMS message.
    pub sms_url: Option<String>,
    /// The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.
    pub sms_method: Option<String>,
    /// The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    pub sms_fallback_url: Option<String>,
    /// The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.
    pub sms_fallback_method: Option<String>,
    /// The URL we should call using a POST method to send status information about SMS messages sent by the application.
    pub sms_status_callback: Option<String>,
    /// The URL we should call using a POST method to send message status information to your application.
    pub message_status_callback: Option<String>,
    /// A descriptive string that you create to describe the new application. It can be up to 64 characters long.
    pub friendly_name: Option<String>,
    /// Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`.
    pub public_application_connect_enabled: Option<bool>,
}

/// struct for passing parameters to the method [`delete_application`]
#[derive(Clone, Debug)]
pub struct DeleteApplicationParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the Application resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_application`]
#[derive(Clone, Debug)]
pub struct FetchApplicationParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the Application resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_application`]
#[derive(Clone, Debug)]
pub struct ListApplicationParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
    pub account_sid: String,
    /// The string that identifies the Application resources to read.
    pub friendly_name: Option<String>,
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_application`]
#[derive(Clone, Debug)]
pub struct UpdateApplicationParams {
    /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
    pub account_sid: String,
    /// The Twilio-provided string that uniquely identifies the Application resource to update.
    pub sid: String,
    /// A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    pub friendly_name: Option<String>,
    /// The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
    pub api_version: Option<String>,
    /// The URL we should call when the phone number assigned to this application receives a call.
    pub voice_url: Option<String>,
    /// The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
    pub voice_method: Option<String>,
    /// The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    pub voice_fallback_url: Option<String>,
    /// The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
    pub voice_fallback_method: Option<String>,
    /// The URL we should call using the `status_callback_method` to send status information to your application.
    pub status_callback: Option<String>,
    /// The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.
    pub status_callback_method: Option<String>,
    /// Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    pub voice_caller_id_lookup: Option<bool>,
    /// The URL we should call when the phone number receives an incoming SMS message.
    pub sms_url: Option<String>,
    /// The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.
    pub sms_method: Option<String>,
    /// The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    pub sms_fallback_url: Option<String>,
    /// The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.
    pub sms_fallback_method: Option<String>,
    /// Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
    pub sms_status_callback: Option<String>,
    /// The URL we should call using a POST method to send message status information to your application.
    pub message_status_callback: Option<String>,
    /// Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`.
    pub public_application_connect_enabled: Option<bool>,
}

/// struct for typed successes of method [`create_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateApplicationSuccess {
    Status201(models::ApiPeriodV2010PeriodAccountPeriodApplication),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteApplicationSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchApplicationSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodApplication),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListApplicationSuccess {
    Status200(models::ListApplicationResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateApplicationSuccess {
    Status200(models::ApiPeriodV2010PeriodAccountPeriodApplication),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateApplicationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteApplicationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchApplicationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListApplicationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_application`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateApplicationError {
    UnknownValue(serde_json::Value),
}

/// Create a new application within your account
pub async fn create_application(
    configuration: &configuration::Configuration,
    params: CreateApplicationParams,
) -> Result<ResponseContent<CreateApplicationSuccess>, Error<CreateApplicationError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Applications.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.api_version {
        multipart_form_params.insert("ApiVersion", param_value.to_string());
    }
    if let Some(param_value) = params.voice_url {
        multipart_form_params.insert("VoiceUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_method {
        multipart_form_params.insert("VoiceMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_url {
        multipart_form_params.insert("VoiceFallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_method {
        multipart_form_params.insert("VoiceFallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.status_callback {
        multipart_form_params.insert("StatusCallback", param_value.to_string());
    }
    if let Some(param_value) = params.status_callback_method {
        multipart_form_params.insert("StatusCallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_caller_id_lookup {
        multipart_form_params.insert("VoiceCallerIdLookup", param_value.to_string());
    }
    if let Some(param_value) = params.sms_url {
        multipart_form_params.insert("SmsUrl", param_value.to_string());
    }
    if let Some(param_value) = params.sms_method {
        multipart_form_params.insert("SmsMethod", param_value.to_string());
    }
    if let Some(param_value) = params.sms_fallback_url {
        multipart_form_params.insert("SmsFallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.sms_fallback_method {
        multipart_form_params.insert("SmsFallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.sms_status_callback {
        multipart_form_params.insert("SmsStatusCallback", param_value.to_string());
    }
    if let Some(param_value) = params.message_status_callback {
        multipart_form_params.insert("MessageStatusCallback", param_value.to_string());
    }
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.public_application_connect_enabled {
        multipart_form_params.insert("PublicApplicationConnectEnabled", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateApplicationSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateApplicationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete the application by the specified application sid
pub async fn delete_application(
    configuration: &configuration::Configuration,
    params: DeleteApplicationParams,
) -> Result<ResponseContent<DeleteApplicationSuccess>, Error<DeleteApplicationError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteApplicationSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteApplicationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch the application specified by the provided sid
pub async fn fetch_application(
    configuration: &configuration::Configuration,
    params: FetchApplicationParams,
) -> Result<ResponseContent<FetchApplicationSuccess>, Error<FetchApplicationError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchApplicationSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchApplicationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a list of applications representing an application within the requesting account
pub async fn list_application(
    configuration: &configuration::Configuration,
    params: ListApplicationParams,
) -> Result<ResponseContent<ListApplicationSuccess>, Error<ListApplicationError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Applications.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.friendly_name {
        req_builder = req_builder.query(&[("FriendlyName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListApplicationSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListApplicationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Updates the application's properties
pub async fn update_application(
    configuration: &configuration::Configuration,
    params: UpdateApplicationParams,
) -> Result<ResponseContent<UpdateApplicationSuccess>, Error<UpdateApplicationError>> {
    let uri_str = format!(
        "{}/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json",
        configuration.base_path,
        AccountSid = crate::apis::urlencode(params.account_sid),
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.api_version {
        multipart_form_params.insert("ApiVersion", param_value.to_string());
    }
    if let Some(param_value) = params.voice_url {
        multipart_form_params.insert("VoiceUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_method {
        multipart_form_params.insert("VoiceMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_url {
        multipart_form_params.insert("VoiceFallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.voice_fallback_method {
        multipart_form_params.insert("VoiceFallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.status_callback {
        multipart_form_params.insert("StatusCallback", param_value.to_string());
    }
    if let Some(param_value) = params.status_callback_method {
        multipart_form_params.insert("StatusCallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.voice_caller_id_lookup {
        multipart_form_params.insert("VoiceCallerIdLookup", param_value.to_string());
    }
    if let Some(param_value) = params.sms_url {
        multipart_form_params.insert("SmsUrl", param_value.to_string());
    }
    if let Some(param_value) = params.sms_method {
        multipart_form_params.insert("SmsMethod", param_value.to_string());
    }
    if let Some(param_value) = params.sms_fallback_url {
        multipart_form_params.insert("SmsFallbackUrl", param_value.to_string());
    }
    if let Some(param_value) = params.sms_fallback_method {
        multipart_form_params.insert("SmsFallbackMethod", param_value.to_string());
    }
    if let Some(param_value) = params.sms_status_callback {
        multipart_form_params.insert("SmsStatusCallback", param_value.to_string());
    }
    if let Some(param_value) = params.message_status_callback {
        multipart_form_params.insert("MessageStatusCallback", param_value.to_string());
    }
    if let Some(param_value) = params.public_application_connect_enabled {
        multipart_form_params.insert("PublicApplicationConnectEnabled", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateApplicationSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateApplicationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
