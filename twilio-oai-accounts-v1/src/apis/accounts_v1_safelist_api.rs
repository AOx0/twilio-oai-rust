/*
 * Twilio - Accounts
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_safelist`]
#[derive(Clone, Debug)]
pub struct CreateSafelistParams {
    /// The phone number or phone number 1k prefix to be added in SafeList. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
    pub phone_number: String,
}

/// struct for passing parameters to the method [`delete_safelist`]
#[derive(Clone, Debug)]
pub struct DeleteSafelistParams {
    /// The phone number or phone number 1k prefix to be removed from SafeList. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
    pub phone_number: Option<String>,
}

/// struct for passing parameters to the method [`fetch_safelist`]
#[derive(Clone, Debug)]
pub struct FetchSafelistParams {
    /// The phone number or phone number 1k prefix to be fetched from SafeList. Phone numbers must be in [E.164 format](https://www.twilio.com/docs/glossary/what-e164).
    pub phone_number: Option<String>,
}

/// struct for typed successes of method [`create_safelist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSafelistSuccess {
    Status201(models::AccountsPeriodV1PeriodSafelist),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_safelist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSafelistSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_safelist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSafelistSuccess {
    Status200(models::AccountsPeriodV1PeriodSafelist),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_safelist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSafelistError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_safelist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSafelistError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_safelist`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchSafelistError {
    UnknownValue(serde_json::Value),
}

/// Add a new phone number or phone number 1k prefix to SafeList.
pub async fn create_safelist(
    configuration: &configuration::Configuration,
    params: CreateSafelistParams,
) -> Result<ResponseContent<CreateSafelistSuccess>, Error<CreateSafelistError>> {
    let uri_str = format!("{}/v1/SafeList/Numbers", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("PhoneNumber", params.phone_number.to_string());
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateSafelistSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateSafelistError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Remove a phone number or phone number 1k prefix from SafeList.
pub async fn delete_safelist(
    configuration: &configuration::Configuration,
    params: DeleteSafelistParams,
) -> Result<ResponseContent<DeleteSafelistSuccess>, Error<DeleteSafelistError>> {
    let uri_str = format!("{}/v1/SafeList/Numbers", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = params.phone_number {
        req_builder = req_builder.query(&[("PhoneNumber", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteSafelistSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSafelistError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Check if a phone number or phone number 1k prefix exists in SafeList.
pub async fn fetch_safelist(
    configuration: &configuration::Configuration,
    params: FetchSafelistParams,
) -> Result<ResponseContent<FetchSafelistSuccess>, Error<FetchSafelistError>> {
    let uri_str = format!("{}/v1/SafeList/Numbers", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.phone_number {
        req_builder = req_builder.query(&[("PhoneNumber", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchSafelistSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchSafelistError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
