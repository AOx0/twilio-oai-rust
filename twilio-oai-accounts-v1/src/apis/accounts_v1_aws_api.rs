/*
 * Twilio - Accounts
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`create_credential_aws`]
#[derive(Clone, Debug)]
pub struct CreateCredentialAwsParams {
    /// A string that contains the AWS access credentials in the format `<AWS_ACCESS_KEY_ID>:<AWS_SECRET_ACCESS_KEY>`. For example, `AKIAIOSFODNN7EXAMPLE:wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY`
    pub credentials: String,
    /// A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    pub friendly_name: Option<String>,
    /// The SID of the Subaccount that this Credential should be associated with. Must be a valid Subaccount of the account issuing the request.
    pub account_sid: Option<String>,
}

/// struct for passing parameters to the method [`delete_credential_aws`]
#[derive(Clone, Debug)]
pub struct DeleteCredentialAwsParams {
    /// The Twilio-provided string that uniquely identifies the AWS resource to delete.
    pub sid: String,
}

/// struct for passing parameters to the method [`fetch_credential_aws`]
#[derive(Clone, Debug)]
pub struct FetchCredentialAwsParams {
    /// The Twilio-provided string that uniquely identifies the AWS resource to fetch.
    pub sid: String,
}

/// struct for passing parameters to the method [`list_credential_aws`]
#[derive(Clone, Debug)]
pub struct ListCredentialAwsParams {
    /// How many resources to return in each list page. The default is 50, and the maximum is 1000.
    pub page_size: Option<i64>,
    /// The page index. This value is simply for client state.
    pub page: Option<i32>,
    /// The page token. This is provided by the API.
    pub page_token: Option<String>,
}

/// struct for passing parameters to the method [`update_credential_aws`]
#[derive(Clone, Debug)]
pub struct UpdateCredentialAwsParams {
    /// The Twilio-provided string that uniquely identifies the AWS resource to update.
    pub sid: String,
    /// A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    pub friendly_name: Option<String>,
}

/// struct for typed successes of method [`create_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCredentialAwsSuccess {
    Status201(models::AccountsPeriodV1PeriodCredentialPeriodCredentialAws),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCredentialAwsSuccess {
    Status204(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`fetch_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCredentialAwsSuccess {
    Status200(models::AccountsPeriodV1PeriodCredentialPeriodCredentialAws),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`list_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCredentialAwsSuccess {
    Status200(models::ListCredentialAwsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCredentialAwsSuccess {
    Status200(models::AccountsPeriodV1PeriodCredentialPeriodCredentialAws),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCredentialAwsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCredentialAwsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchCredentialAwsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCredentialAwsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_credential_aws`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCredentialAwsError {
    UnknownValue(serde_json::Value),
}

/// Create a new AWS Credential
pub async fn create_credential_aws(
    configuration: &configuration::Configuration,
    params: CreateCredentialAwsParams,
) -> Result<ResponseContent<CreateCredentialAwsSuccess>, Error<CreateCredentialAwsError>> {
    let uri_str = format!("{}/v1/Credentials/AWS", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    multipart_form_params.insert("Credentials", params.credentials.to_string());
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    if let Some(param_value) = params.account_sid {
        multipart_form_params.insert("AccountSid", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<CreateCredentialAwsSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateCredentialAwsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete a Credential from your account
pub async fn delete_credential_aws(
    configuration: &configuration::Configuration,
    params: DeleteCredentialAwsParams,
) -> Result<ResponseContent<DeleteCredentialAwsSuccess>, Error<DeleteCredentialAwsError>> {
    let uri_str = format!(
        "{}/v1/Credentials/AWS/{Sid}",
        configuration.base_path,
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<DeleteCredentialAwsSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteCredentialAwsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch the AWS credentials specified by the provided Credential Sid
pub async fn fetch_credential_aws(
    configuration: &configuration::Configuration,
    params: FetchCredentialAwsParams,
) -> Result<ResponseContent<FetchCredentialAwsSuccess>, Error<FetchCredentialAwsError>> {
    let uri_str = format!(
        "{}/v1/Credentials/AWS/{Sid}",
        configuration.base_path,
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<FetchCredentialAwsSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<FetchCredentialAwsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieves a collection of AWS Credentials belonging to the account used to make the request
pub async fn list_credential_aws(
    configuration: &configuration::Configuration,
    params: ListCredentialAwsParams,
) -> Result<ResponseContent<ListCredentialAwsSuccess>, Error<ListCredentialAwsError>> {
    let uri_str = format!("{}/v1/Credentials/AWS", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.page_size {
        req_builder = req_builder.query(&[("PageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("Page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page_token {
        req_builder = req_builder.query(&[("PageToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<ListCredentialAwsSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<ListCredentialAwsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Modify the properties of a given Account
pub async fn update_credential_aws(
    configuration: &configuration::Configuration,
    params: UpdateCredentialAwsParams,
) -> Result<ResponseContent<UpdateCredentialAwsSuccess>, Error<UpdateCredentialAwsError>> {
    let uri_str = format!(
        "{}/v1/Credentials/AWS/{Sid}",
        configuration.base_path,
        Sid = crate::apis::urlencode(params.sid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };
    let mut multipart_form_params = std::collections::HashMap::new();
    if let Some(param_value) = params.friendly_name {
        multipart_form_params.insert("FriendlyName", param_value.to_string());
    }
    req_builder = req_builder.form(&multipart_form_params);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        let entity: Option<UpdateCredentialAwsSuccess> = serde_json::from_str(&content).ok();
        Ok(ResponseContent {
            status,
            content,
            entity,
        })
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCredentialAwsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
